#tag ClassProtected Class AppInherits Application	#tag Event		Sub Open()		  dim universalticks as double = Microseconds		  dim currentfolder as FolderItem		  currentfolder = GetFolderItem("")		  		  dim mutexname as string		  //mutexname = "Flip Side Racing " + EncodeBase64(MD5(currentfolder.AbsolutePath))		  mutexname = "Flip Side Racing"		  		  mMutex = new Mutex(mutexname)		  		  if not mMutex.TryEnter then		    //We failed so the app must already be open, leave quickly		    Quit		  end if		  		  //Show splash screen so people know program is loading		  splashScreen.Show		  //Need to refresh the window immediately or MS Windows will not show the logo		  splashScreen.Refresh		  		  //App must not already be open so we can continue on		  G_allowedtext = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 -_."+chrb(8)+chrb(29)+chrb(30)+chrb(31)+chrb(28)+chrb(127)		  		  GM_LogToSplash("Opening Database")		  		  dim exists as Boolean		  exists = GM_PrepareDatabase()		  if exists=false then		    GM_CreateDatabaseAndTables()		  else		    if G_Database.Connect=false then		      MsgBox "Database class failed to connect to FlipSideDB"		    end if		  end if		  		  //Optimize database speed		  G_Database.SQLExecute("PRAGMA default_cache_size = 65536")		  G_Database.SQLExecute("PRAGMA journal_mode=WAL")		  G_Database.Commit		  		  		  //fixme, upgrade database		  GM_UpgradeDatabase		  		  G_Preferences = new Preferences //this will instantiate the preferences class~		  //Set when the application started, using for debug to check where slow loading is occuring		  G_Preferences.appStartTime = universalticks		  		  GM_LogToSplash("Filling Race Control Structure")		  GM_FillRacersControlStructure()//this fills the basic control structure used to handle all game logic with racers		  		  #if TargetLinux then		    //If we are running in linux we need to make sure kttsd is running in order for text to speech to work		    dim s as shell		    s = new shell		    dim command as string		    dim result as string		    		    GM_LogToSplash("Starting KTTSD")		    command = "kttsd"		    		    s.Execute command		    result = s.readall		    		  #endif		  		  GM_LogToSplash("Initializing Main Window")		  //We manually open the window instead of defining the default window property for app so that mutex detection will work		  mainWindow.Show		End Sub	#tag EndEvent	#tag Event		Function UnhandledException(error As RuntimeException) As Boolean		  dim s() as string = error.CleanStack		  dim sErr as string = Join(s, EndOfLine)		  dim errorType as string		  dim errorMessage as string		  dim os as string		  dim version as string		  dim f as new FolderItem		  dim dump as TextOutputStream		  dim currentTime as new date		  dim dumpText as string		  dim dumpSocket as new HTTPSocket		  dim formData as new dictionary		  		  //Use global method to get OS info		  os = GM_GetOSVersion		  		  //Get current folder and set the file to dump to		  f = GetFolderItem("")		  f = f.Child("dump.txt")		  		  //Build the version info		  version = str(app.MajorVersion)+"."+str(app.NonReleaseVersion)		  if app.StageCode < 3 then		    version = "Beta Version " + version		  else		    version = "Version " + version		  end if		  		  //Build the error message		  errorType = Introspection.GetType(error).name		  errorMessage = "Error: " + errorType + error.Message + EndOfLine + sErr + EndOfLine + EndOfLine + "Please restart the application"		  		  		  MsgBox errorMessage		  		  //Now we should create the dump and send it to a file		  dumpText = dumpText + version + EndOfLine		  if G_Preferences <> nil then		    dumpText = dumpText + G_Preferences.readS("clubName") + EndOfLine		    dumpText = dumpText + G_Preferences.hardwareType + EndOfLine		  end if		  dumpText = dumpText + str(currentTime.SQLDateTime) + EndOfLine		  dumpText = dumpText + errorType + EndOfLine		  dumpText = dumpText + Error.Message + EndOfLine		  dumpText = dumpText + sErr + EndOfLine		  dumpText = dumpText + os + EndOfLine		  		  dump = TextOutputStream.Create(f)		  dump.Write(dumpText)		  dump.close		  		  		  //Next we attempt to send this to the site so it can be diagnosed		  //Build up the form data		  formData.Value("version")=str(App.MajorVersion*100+App.MinorVersion)		  if G_Preferences <> nil then		    formData.Value("clubname")=G_Preferences.readS("clubName")		    formData.Value("lapcounter")=G_Preferences.hardwareType		  end if		  formData.Value("errortime")=currentTime.SQLDateTime		  formData.Value("errortype")=errorType		  formData.Value("errormessage")=error.Message		  formData.Value("errorstack")=sErr		  formData.Value("os")=os		  formData.Value("stage")=str(App.StageCode)		  formData.Value("language")=language		  formData.Value("_formname")="crashes/create"		  		  //Set the form data and submit it to the web site		  dumpSocket.SetFormData formData		  dumpSocket.Post "http://web2py.flipsidehobbies.com/fsrclients/crashes/"		  		  		  return true		End Function	#tag EndEvent	#tag Note, Name = LICENSE		Copyright 2008 Jeremy Auten				This file is part of Flip Side Racing Software.				Flip Side Racing Software is free software: you can redistribute it and/or modify		it under the terms of the GNU General Public License as published by		the Free Software Foundation, either version 3 of the License, or		(at your option) any later version.				Flip Side Racing Software is distributed in the hope that it will be useful,		but WITHOUT ANY WARRANTY; without even the implied warranty of		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		GNU General Public License for more details.				You should have received a copy of the GNU General Public License		along with Flip Side Racing Software.  If not, see <http://www.gnu.org/licenses/>.	#tag EndNote	#tag Property, Flags = &h21		Private mMutex As Mutex	#tag EndProperty	#tag Constant, Name = kEditClear, Type = String, Dynamic = False, Default = \"&Delete", Scope = Public		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"&Delete"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"&Delete"	#tag EndConstant	#tag Constant, Name = kFileQuit, Type = String, Dynamic = False, Default = \"&Quit", Scope = Public		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"E&xit"	#tag EndConstant	#tag Constant, Name = kFileQuitShortcut, Type = String, Dynamic = False, Default = \"", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"Cmd+Q"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"Ctrl+Q"	#tag EndConstant	#tag ViewBehavior	#tag EndViewBehaviorEnd Class#tag EndClass