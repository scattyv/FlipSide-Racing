#tag ClassProtected Class raceObject	#tag Method, Flags = &h0		Sub AddRacerToRace(uid as String, index as integer, currenttime as double)		  //Use this method to add a racer to a race		  dim pass as Boolean		  		  //If they are in the database then we can add them to the race		  for j as integer=0 to G_Preferences.maxRacers - 1		    //add only to an open slot		    if slotsEnabled(j)=false then		      //OK, we have a slot now we need to find the record		      		      //We have a match for the racer record, add them to the race		      mainWindow.M_Slots(j)=racers(index)		      slotsEnabled(j) = true		      		      //Apply color to racer for use on main screen		      racers(index).textColor=G_Preferences.slotColors(j)		      		      		      racers(index).Active=true//it's now active since it's been added.  This shoudn't be allowed to be selected from the list now again~		      		      //For adding mid game make sure information is reset...		      //G_Preferences.theRaceObject.racers(k).timeSinceLastCheck=Microseconds//just in case you just added the racer, this will simulate the 'initial time', so it gets the first lap time correct.  TODO: change later?		      //		      //Use the race start time to determine this		      //Check to see if we were fed a time value if so use 0 instead		      if currenttime > 0 then		        racers(index).timeSinceLastCheck= 0		      else		        racers(index).timeSinceLastCheck=mainWindow.M_StartTime		      end if		      		      redim racers(index).lapTimes(-1)//this can happen if a new racer was added mid-game (erase prior data in 0)		      redim racers(index).lapCounts(-1)		      redim racers(index).timeAtLap(-1)		      redim racers(index).lapPlaces(-1)		      redim racers(index).lagTimes(-1)		      //redim racers(index).lapTimes(0)//(set the first position always to 0)		      //redim racers(index).lapCounts(0)		      //redim racers(index).timeAtLap(0)		      //ReDim racers(index).lapPlaces(0)		      		      racers(index).lapCount=0//to reset it		      racers(index).best_time=999		      racers(index).Pace=0		      racers(index).lagTime=0		      racers(index).lastLapTime=0		      racers(index).lapsLeading=0		      racers(index).firstPass=0		      racers(index).currentPlace=UBound(activeRacers)+2		      		      //Without this line it won't know to anime this new racer correctly		      activeRacers.Append racers(index)//this will add to the currently active racers in the 'race' right now.  At the end of a race this will be nil~		      activeUIDs.Append racers(index).UID		      		      if RaceType <> "Free Play" then		        //It's also required that database references are stored now, no removing once it's in!		        pass = StoreRacerToDatabase(racers(index).UID)		        if pass=false then		          MsgBox "An Error Occured while trying to store just the single racer to the database system, report this to admin"		        end if		      else		        pass = true		      end if		      		      mainWindow.AnimateRaceScreen()//to reflect changes to the slots~		      		      //Beep to indicate they were added		      if G_Preferences.useAudio=true then		        mainWindow.AudioThread1.Append(G_Preferences.S_CarLapBeep)		      end if		      		      return		      		    end if		    //Goto next slot to see if it is open		  next		  		  //Racer could not be added so deactive them		  racers(index).Active = False		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CalculateLag(index as integer)		  'Calculate Lag Function		  'Description: Lag is time difference from the leader although now time can be shown as just 'laps behind the leader',		  'unless on same lap, in which case it's time.  Also in this function is the literal 'time' from the leader for graphing purposes.		  		  dim lactiveRacers(-1) as Integer = FindActiveRacerIndexes()		  dim max as Integer = 25		  dim leaderIndex as Integer		  dim lagTime as double		  dim lastIndexMe as Integer		  dim lastIndexLeader as Integer		  dim currentTime as Double		  		  for i as integer=0 to UBound(lactiveRacers)		    if racers(lactiveRacers(i)).currentPlace<max then//eventually the person who is in 1st place will become apparent.		      max=racers(lactiveRacers(i)).currentPlace		      leaderIndex=lactiveRacers(i)		    end if		  next		  		  		  //lapTimeMe = racers(index).lapTimes(lastIndexMe)//grabs the last known time for 'me' as well now, where me is the racer.		  		  //lapTimeLeader = racers(leaderIndex).lapTimes(lastIndexMe)//grabs the coresponding start index value for the leader~		  		  lastIndexLeader = UBound(racers(leaderIndex).lapTimes)//find how long the array is~		  currentTime = timeElapsed		  //MsgBox "Current Time="+str(currentTime)		  		  //Now that we know each of there last elements that are added, we will create a 'for' loop that will go through there values (with the exception of the 'last element'.		  for i as Integer=0 to UBound(lactiveRacers)		    lagTime=0//reset it for next racer.		    if lactiveRacers(i)<>leaderIndex then//we can't do lag checks with the leader~		      lastIndexMe =  ubound(racers(lactiveRacers(i)).lapTimes)		      		      if lastIndexMe = - 1 then		        //We can not calculate lag yet for this racer as they have no laps		        continue for i		      end if		      //MsgBox "lastIndexMe="+str(lastIndexMe)+" coresponds to racer:"+racers(activeRacers(i)).theName		      for k as Integer=lastIndexMe to lastIndexLeader//so if we have racers 5,10,15,20 and a racer 5,10,15, it will start from the 15 versus the 15.		        //MsgBox "k="+str(k)		        if lastIndexMe=lastIndexLeader then//special conditions apply when this occurs for calculating lag in this case.		          lagTime = (currentTime-racers(leaderIndex).lapTimes(lastIndexLeader))-(currentTime-racers(lactiveRacers(i)).lapTimes(lastIndexLeader))//take there differences from current time and that is lag~		          //MsgBox "This is special condition where racer matches laps with leader, lag="+str(lagTime)		        else		          if k=lastIndexMe then//if we are on the first lap comparison, must be lapTimes here because that will account for the lag below index k		            //lagTime =  racers(activeRacers(i)).lapTimes(k) - racers(leaderIndex).lapTimes(k)		            lagTime = racers(leaderIndex).timeAtLap(k)		            //lagTime = racers(activeRacers(i)).timeAtLap(k) - racers(leaderIndex).timeAtLap(k)		            //MsgBox "k="+str(k)+" lag calculated for first lap comparison,  lag="+str(lagTime)+" coresponds to racer:"+racers(activeRacers(i)).theName+_		            //EndOfLine+EndOfLine+"racersTotalTime:"+str(racers(activeRacers(i)).lapTimes(k))+EndOfLine+"leadersTime:"+str(racers(leaderIndex).lapTimes(k))+_		            //EndOfLine+"RacersTime:"+str(racers(activeRacers(i)).timeAtLap(k))+_		            //EndOfLine+"LeadersTime:"+str(racers(leaderIndex).timeAtLap(k))		          elseif k<lastindexLeader then//othewise we are somewhere in the middle but not at the end yet of course because of the if statement above.		            lagTime = lagTime + racers(leaderIndex).timeAtLap(k)//adds the coresponding time at laps for the rest of the laps to the lag~		            //MsgBox "k="+str(k)+" lag comparison, lag="+str(lagTime)+" coresponds to racer:"+racers(activeRacers(i)).theName+_		            //EndOfLine+EndOfLine+"leadersTime:"+str(racers(leaderIndex).timeAtLap(k))		          elseif k=lastindexLeader then//then k must equal the lastIndexLeader in which slightly different rules apply here		            'lagTime = lagTime + racers(leaderIndex).timeAtLap(lastindexLeader)+(currentTime - racers(activeRacers(i)).lapTimes(lastIndexMe))		            lagTime = lagTime + (currentTime - racers(lactiveRacers(i)).lapTimes(lastIndexMe)) + racers(leaderIndex).timeAtLap(lastIndexLeader)		            //lagTime = lagTime + racers(leaderIndex).timeAtLap(k)+(currentTime-racers(leaderIndex).lapTimes(k))//add the time plus difference to the current time to finish it off.		            		            //MsgBox "k must equal the lastIndexLeader then, lets double check, k="+str(k)+" lastIndexLeader="+str(lastIndexLeader)+", therefor lagTime final ="+str(lagTime)+" for racer:"+racers(activeRacers(i)).theName+_		            //EndOfLine+EndOfLine+"leadersTime:"+str(racers(leaderIndex).timeAtLap(k))+EndOfLine+"Current Time Involved="+str(currentTime)+_		            //EndOfLine+"leadersTotalTime:"+str(racers(leaderIndex).lapTimes(k))+_		            //EndOfLine+"activeRacers(i).lapTimes(lastIndexMe)="+str(racers(activeRacers(i)).lapTimes(lastIndexMe))		          else		            MsgBox "Error in lag calculation, this shoudn't be possible! K is greater then lastindexleader? k="+str(k)+" lastIndexLeader="+str(lastIndexLeader)		          end if		        end if		      next		      		      //Before this exits make sure to store the lag we calculated to the appropriate racer! (with special conditions occuring for the racer of the (index) that was sent for graphing purposes)		      //MsgBox "Veryify that lagTime being written to screen is what I saw, lagTime="+str(lagTime)		      if lagTime<0 then		        //MsgBox "Error: Lag Time less Than 0, lag ="+str(lagTime)+" for racer:"+racers(activeRacers(i)).theName		      end if		      		      racers(lactiveRacers(i)).lagTime = lagTime		      if lactiveRacers(i)=index then//lets store this value to the lagTimes array for that racer		        racers(index).lagTimes.append lagTime//appends the known lagTime for the UID that called this for graphing purposes.		      end if		      		    else//then just display this persons lag as '0'		      //MsgBox "Leader Detected, so his lagTime is 0, i="+str(i)+" for racer:"+racers(activeRacers(i)).theName		      lagTime=0		      racers(lactiveRacers(i)).lagTime = lagTime//0		      if lactiveRacers(i)=index then		        racers(index).lagTimes.append lagTime//appends the known lagTime for the UID that called this for graphing purposes.		      end if		    end if		  next		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CalculateNewRacerValues(UID as string, UIDlaptime as double)		  'Version 1.0		  'Description: This will calculate all the new values for the racer based on the UID sent		  		  //Find the INDEX of the racer based on its UID (if the UID doesn't exists like in the case of '0')		  dim i as Integer		  dim index as Integer		  dim fastestlap as boolean		  fastestlap = false		  		  for i=0 to UBound(racers)		    if racers(i).UID=UID and racers(i).Enabled = True then		      index=i//now we know which racer to work with here~		      if racers(index).Active=true then		        exit		      elseif mainwindow.M_RaceEnding=false then		        //set racer active now to prevent double submitting		        racers(index).Active=True		        //Make sure that there is not already a racer with this name added		        //In free play mode duplicate names are allowed		        if G_Preferences.theRaceObject.RaceType <> "Free Play" then		          for j as integer = 0 to UBound(activeRacers)		            if racers(index).theName = activeRacers(j).theName then		              racers(index).Active=False		              return		            end if		          next		        end if		        		        AddRacerToRace(UID, index, UIDlaptime)		        //Set when the first pass accross the loop occured.  This is to prevent the possibility of getting a lap before a full lap is completed		        //Check to see if we were fed a time from hardware if so use that		        if UIDlaptime > 0 then		          racers(index).firstPass = UIDlaptime		        else		          racers(index).firstPass = Microseconds		        end if		        		        //Check to see if we are staggering starts		        if G_Preferences.theRaceObject.RaceType = "Staggered Time" or G_Preferences.theRaceObject.RaceType = "Free Play" then		          //Check to see if we should use a hardware time		          if UIDlaptime > 0 then		            //Divide by 1000000 since other logic expects the time to be in seconds not Microseconds		            racers(index).laptimeDeviation = UIDlaptime/1000000		          else		            racers(index).laptimeDeviation = timeElapsed		          end if		        else		          racers(index).laptimeDeviation = 0		        end if		        		        //If a slot is available they will have been added to the race.  Since they did not do a full lap we return so it does not calculate anything		        		        //If we are in a drag race we need to continue as their are no laps		        if RaceType = "Drag" then		          exit for i		        end if		        		        return		      end if		    end if		    if i=UBound(racers) then//we didn't find the ID		      		      Return//then this means we were sent a 'null' UID, so nothing to calculate here.		    end if		  next		  		  if racers(index).raceEnded=false then		    //First find the control structure index for race car that refers to the UID sent		    //Check for hardware timer if so use that		    dim universalTicks as Double		    if UIDlaptime > 0 then		      //Use the given time for calculations		      universalTicks = UIDlaptime		    else		      universalTicks = Microseconds//so all calculations are based off the ticks from one point in time, cause these operations take time also!		    end if		    		    //Check to see if they have completed at least 1 full lap yet		    if racers(index).lapCount = 0 then		      if racers(index).firstPass = 0 then		        //This is the first time they have crossed the loop, set the first pass and return		        racers(index).firstPass = universalTicks		        //Check to see if we are staggering starts		        if G_Preferences.theRaceObject.RaceType = "Staggered Time" or G_Preferences.theRaceObject.RaceType = "Free Play" then		          racers(index).laptimeDeviation = timeElapsed		        else		          racers(index).laptimeDeviation = 0		        end if		        		        return		      ElseIf (universalTicks - racers(index).firstPass)/1000000 < G_Preferences.theRaceObject.minLapTime and RaceType <> "Drag" then		        //Check to make sure this is greater than the minimum lap time else return		        return		        		      ElseIf (universalTicks - racers(index).timeSinceLastCheck)/1000000 < G_Preferences.theRaceObject.minLapTime and RaceType = "Drag" then		        //In a drag race we have to look at when the race started for lap time minimum, this is stored in timeSinceLastCheck for new racers		        return		        		      end if		      		    end if		    		    //For a drag race set the race to ended for this racer so they can not get multiple laps		    //This operation is after the first lap minimum lap time check just in case there are 2 bridges		    if RaceType = "Drag" then		      racers(index).raceEnded = True		    end if		    		    		    //Find the lap time first, a lot of other calculations are based on this~		    dim lapTime as double		    dim lapTimeString as string		    		    		    lapTime = (universalTicks - racers(index).timeSinceLastCheck)/1000000//so we know the time for this lap before we change it~		    		    //Check to see if we are doing staggered starts, if so and it is the first lap we need to remove the time that it took to cross the loop the first time		    if racers(index).lapCount = 0 then		      laptime = laptime - racers(index).laptimeDeviation		    end if		    		    		    lapTimeString = format(lapTime,G_Preferences.lapTimeFormat)		    lapTime = cdbl(lapTimeString)//grabs lap time regardless, '0' is already stored for the first time position~		    		    //If the lap time as of now is greater than the minimum lap time don't count the lap or anything in here		    if lapTime>=G_Preferences.theRaceObject.minLapTime then		      racers(index).lastLapTime = lapTime		      //Best Lap~		      if racers(index).timeSinceLastCheck<>0 then		        if racers(index).best_time > lapTime then//so it only shows the 'best'		          if racers(index).lapCount > 0 then		            for i=0 to UBound(racers)		              if lapTime > racers(i).best_time then		                fastestlap = false		                exit		              end if		              fastestlap = true		            next		            		            //Logic to determine what type of best lap announcements the racers want		            //If the lap indication is set to Lap Difference then we always need to announce best laps		            if lapIndication = "Lap Difference" or lapIndication = "Lap Difference 1 Decimal" or lapIndication = "Lap Difference 2 Decimals" then		              		              if fastestlap = false then		                mainWindow.robotSpeak(racers(index).speakName + G_Preferences.speechText.Value("bestlap") + " " + cstr(lapTime) + " " + G_Preferences.speechText.Value("seconds"), false)		              else		                mainWindow.robotSpeak(G_Preferences.speechText.Value("fastestlap") + " " + racers(index).speakName + " " + cstr(lapTime) + " " + G_Preferences.speechText.Value("seconds"), false)		              end if		              		            else		              		              Select Case bestlapannouncement		                		              Case "Overall"		                if fastestlap = true then		                  mainWindow.robotSpeak(G_Preferences.speechText.Value("fastestlap") + " " + racers(index).speakName + " " + cstr(lapTime) + " " + G_Preferences.speechText.Value("seconds"), false)		                end if		                		              Case "None"		                //Nothing to see here, move along		                		              Else		                //This is the default, if an old profile exists the value will be blank or new profiles will have it set to Personal		                if fastestlap = false then		                  mainWindow.robotSpeak(racers(index).speakName + G_Preferences.speechText.Value("bestlap") + " " + cstr(lapTime) + " " + G_Preferences.speechText.Value("seconds"), false)		                else		                  mainWindow.robotSpeak(G_Preferences.speechText.Value("fastestlap") + " " + racers(index).speakName + " " + cstr(lapTime) + " " + G_Preferences.speechText.Value("seconds"), false)		                end if		                		              end select		              		            end if		            		          end if		          racers(index).best_time = lapTime		          racers(index).best_lap = racers(index).lapCount+1		        end if		      end if		      		      //Graph and Drawing Info for laps *Order Based, do not move*		      racers(index).lapCount=racers(index).lapCount+1//always increments by '1', because we know that the 'reader' only reads when the cars done a lap.		      racers(index).lapCounts.append(racers(index).lapCount)//these are needed to plot to the graph		      		      //Graph and Drawing into for time		      dim total as double		      dim totalString as string		      dim lastInArray as double		      dim limit as integer = UBound(racers(index).lapTimes)//lap time (the most difficult to figure out is also needed to plot graph)		      if limit>=0 then		        lastInArray = racers(index).lapTimes(UBound(racers(index).lapTimes))		        total = lapTime+lastInArray//use the previous value of 'limit' and add that to lapTime to make the new total.		        totalString = format(total,G_Preferences.lapTimeFormat)		        total = cdbl(totalString)		        racers(index).lapTimes.append(total)		      else		        racers(index).lapTimes.append(lapTime)		      end if		      		      //Calculate the Pace		      racers(index).timeAtLap.append lapTime//we need this to calculate the average corectly since lapTimes holds the 'exact' time done so far as of that lap instead of the total 'laptime', as lapTimes would hold.		      CalculatePace(index)//calculates the pace for the racer using the index of the racer with the UID~		      		      racers(index).timeSinceLastCheck = universalTicks //this will give us an accurate measure of the time based on cycles		      		      CalculatePlace(index, UIDlaptime)//Is the racer in 1st place, 2nd place etc, needs to be here because if there is a tie, it uses timeSinceLastCheck to break it [order based]~		      //Add place to the array		      racers(index).lapPlaces.append(racers(index).currentPlace)		      		      //If they are in first place record this.  Some race formats award points based on how many laps you were in first		      If racers(index).currentPlace = 1 then		        if racers(index).UID = UID then		          racers(index).lapsLeading = racers(index).lapsLeading + 1		        end if		      end if		      		      		      'dim currentTime as double = ((universalTicks - mainWindow.M_StartTime)/60)		      'dim currentTimeString as string = Format(currentTime,"0.00")		      'currentTime = val(currentTimeString)		      		      CalculateLag(index)//Calculate the lag last because lag is based on the results from the CalculatePlace() function and requires the current time. [order based]~		      		      //Did the race End?		      if UIDlaptime > 0 then		        Select Case RaceType		        Case "Timed"		          if universalTicks/1000000 >= timeLimit then		            racers(index).raceEnded=true		          end if		          		        Case "Lap and Timed"		          if universalTicks/1000000 >= timeLimit then		            racers(index).raceEnded=true		          end if		          for j as integer = 0 to UBound(activeRacers)		            if activeRacers(j).lapCount >= numLaps then		              racers(index).raceEnded=true		            end if		          next		          		        Case "Staggered Time"		          if universalTicks/1000000 >= timeLimit + racers(index).laptimeDeviation then		            racers(index).raceEnded=true		          end if		          		        Case "Lap"		          if racers(index).EndingRace=true then		            //Normal computer timer or a non timed race so we can just end the race for this racer as expected		            racers(index).raceEnded=true		          end if		        end select		        		      else		        		        if racers(index).EndingRace=true then		          //Normal computer timer or a non timed race so we can just end the race for this racer as expected		          racers(index).raceEnded=true		        end if		      end if		      //Play the beep sound, a racer did a lap after all		      if G_Preferences.useAudio=true then		        //Set the format for how lap times would be said		        dim tempLapTimeFormat as string		        Select Case lapIndication		          		        Case "Lap Time","Lap Difference"		          tempLapTimeFormat = G_Preferences.lapTimeFormat		          		        Case "Lap Time 1 Decimal","Lap Difference 1 Decimal"		          tempLapTimeFormat = "0.0"		          		        Case "Lap Time 2 Decimals","Lap Difference 2 Decimals"		          tempLapTimeFormat = "0.00"		          		        Else		          tempLapTimeFormat = G_Preferences.lapTimeFormat		          		        End Select		        		        		        //Check what sound to make when a new lap happens		        select case lapIndication		          		        Case "Beep"		          mainWindow.AudioThread1.Append(G_Preferences.S_CarLapBeep)		          		        Case "Lap Time","Lap Time 1 Decimal","Lap Time 2 Decimals"		          if racers(index).best_lap = racers(index).lapCount then		            //For the first lap say the actual time		            //Or if the lap announcement mode is set to overall then say lap times unless it is the overall fastest lap		            //If best lap announcement is set to none then always say the individual lap time even if it is the best lap		            if racers(index).lapCount = 1 then		              mainWindow.robotSpeak(format(racers(index).lastLapTime,tempLapTimeFormat),false)		            ElseIf bestlapannouncement = "Overall" then		              if fastestlap = False then		                mainWindow.robotSpeak(format(racers(index).lastLapTime,tempLapTimeFormat),false)		              end if		            elseif bestlapannouncement = "None" then		              mainWindow.robotSpeak(format(racers(index).lastLapTime,tempLapTimeFormat),false)		            end if		            		          else		            mainWindow.robotSpeak(format(racers(index).lastLapTime,tempLapTimeFormat),false)		          end if		          		        Case "Lap Difference","Lap Difference 1 Decimal","Lap Difference 2 Decimals"		          if racers(index).best_lap = racers(index).lapCount then		            //For the first lap say the actual time		            if racers(index).lapCount = 1 then		              mainWindow.robotSpeak(format(racers(index).lastLapTime,tempLapTimeFormat),false)		            end if		            //else do nothing because it is a new best lap		          else		            mainWindow.robotSpeak(format(racers(index).lastLapTime-racers(index).best_time,tempLapTimeFormat),false)		          end if		        end select		        		        if RaceType = "Lap" or RaceType = "Lap and Timed" then		          //Check to see how many laps remain for this racer and announce if it is specific amount		          Select Case numLaps - racers(index).lapCount		          Case 1		            mainWindow.robotSpeak(racers(index).speakName + " " + G_Preferences.speechText.Value("lastlap"), true)		          Case 10		            mainWindow.robotSpeak(racers(index).speakName + " 10 " + G_Preferences.speechText.Value("lapsremaining"), true)		          Case 20		            mainWindow.robotSpeak(racers(index).speakName + " 20 " + G_Preferences.speechText.Value("lapsremaining"), true)		          Case 30		            mainWindow.robotSpeak(racers(index).speakName + " 30 " + G_Preferences.speechText.Value("lapsremaining"), true)		          Case 50		            mainWindow.robotSpeak(racers(index).speakName + " 50 " + G_Preferences.speechText.Value("lapsremaining"), true)		          end select		        end if		        		      end if		      		      mainwindow.AnimateRaceScreen()//it is safe to to drawing here then		      mainwindow.AnimateStatisticScreen()		      		    end if		  end if//won't calculate anything if the race has already ended for that racer		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CalculatePace(index as integer)		  dim avg as Double		  dim i as integer		  		  i = UBound(racers(index).lapTimes)		  //Calculate the average based on the values already updated		  avg = racers(index).lapTimes(i)/racers(index).lapCount		  		  //No need to look at every lap to calculate average		  //for i as integer=1 to UBound(racers(index).timeAtLap)		  //total=total+racers(index).timeAtLap(i)		  //next		  		  //avg = total/length		  //No need to format this number it is not directly displayed		  //avgTemp=Format(avg,"0.00")		  //avg=cdbl(avgTemp)		  racers(index).average=avg//so we can reference it later~		  racers(index).adjustedaverage=avg		  		  Select Case RaceType		  Case "Timed"		    racers(index).Pace = Ceil(timeLimit/avg)		  Case "Lap"		    racers(index).Pace = Ceil(numLaps*avg)		  Case "Lap and Timed"		    racers(index).Pace = Ceil(timeLimit/avg)		  Case "Staggered Time"		    racers(index).Pace = Ceil(timeLimit/avg)		  Case "Free Play"		    racers(index).Pace = avg		  Case "Drag"		    racers(index).Pace = racers(index).lastLapTime		  else//for safety reasons		    MsgBox "CalculatePace: -> Error unknown race type!"		  End Select		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub CalculatePlace(index as integer, currenttime as Double)		  dim i as Integer		  dim oldname as string		  dim rankArray(-1) as Integer		  dim oldrank as integer		  dim newrank as integer		  		  //If we got a -1 then we do not need to announce ranks		  if index <> -1 then		    //Find the previous rank of the racer		    oldrank = racers(index).currentPlace		  end if		  		  for i=0 to UBound(racers)		    if racers(i).Active=true then		      rankArray.Append i		    end if		  next		  		  // Find who was in first place		  for i=0 to UBound(racers)		    if racers(i).currentPlace = 1 and racers(i).lapCount > 0 then		      oldname = racers(i).speakName		    end if		  next		  		  		  		  //now we got to re-arange the rank array based on info from the ActiveIndexes		  dim temp as Integer		  dim time1,time2 as Double		  		  if rankMethod = "Best Lap" then		    //Sort rank according to whoever has the best lap time		    for i=0 to UBound(rankArray)		      if i<>UBound(rankArray) then//As long as were not at the end~		        if racers(rankArray(i+1)).best_time<racers(rankArray(i)).best_time then		          temp = rankArray(i)		          rankArray(i) = rankArray(i+1)		          rankArray(i+1) = temp		          i=-1//reset it so it checks through the loop again incase one was greater		        elseif racers(rankArray(i+1)).best_time=racers(rankArray(i)).best_time then//if there is a tie in laps then we can play them by there current time on the lap		          time1= racers(rankArray(i+1)).best_lap		          time2= racers(rankArray(i)).best_lap		          if time1>time2 then//then the person ahead has the better time so we'll swap positions		            temp = rankArray(i)		            rankArray(i) = rankArray(i+1)		            rankArray(i+1) = temp		            i=-1//reset it so it checks through the loop again incase one was greater		          end if		        end if		      end if		    next		    		  elseif rankMethod = "Average Lap" then		    //Sort by the average, usefull for free play mode and staggered start races		    for i=0 to UBound(rankArray)		      if i<>UBound(rankArray) then//As long as were not at the end~		        if racers(rankArray(i+1)).average<racers(rankArray(i)).average then		          temp = rankArray(i)		          rankArray(i) = rankArray(i+1)		          rankArray(i+1) = temp		          i=-1//reset it so it checks through the loop again incase one was greater		        elseif racers(rankArray(i+1)).average=racers(rankArray(i)).average then//if there is a tie in laps then we can play them by there current time on the lap		          time1= racers(rankArray(i+1)).average		          time2= racers(rankArray(i)).average		          if time1>time2 then//then the person ahead has the better time so we'll swap positions		            temp = rankArray(i)		            rankArray(i) = rankArray(i+1)		            rankArray(i+1) = temp		            i=-1//reset it so it checks through the loop again incase one was greater		          end if		        end if		      end if		    next		    		    		  else		    if RaceType = "Staggered Time" then		      //For staggered start races rank according to average lap time		      //Find the current time so we can check to see if the current lap is above the average and adjust accordingly		      dim universalTicks as Double		      //Check to see if we were given a time to use, if not use the system time		      if currenttime > 0 then		        universalTicks = currenttime		      else		        universalTicks = Microseconds		      end if		      		      for i=0 to UBound(rankArray)		        //If they have not finished their race check if the average is off		        if racers(rankArray(i)).raceEnded <> True then		          dim tempclap as double		          tempclap = (universalTicks - racers(rankArray(i)).timeSinceLastCheck)/1000000		          //Adjust average lap time if their current lap is exceeding the average		          if  tempclap > racers(rankArray(i)).average then		            //Current lap exceeds the average lap time we need to adjust it to make sure ranking is correct		            racers(rankArray(i)).adjustedaverage = racers(rankArray(i)).average + ((tempclap - racers(rankArray(i)).average)/racers(rankArray(i)).lapCount)		            //Since we have a new average we should calculate a new pace		            racers(rankArray(i)).Pace = Ceil(timeLimit/racers(rankArray(i)).adjustedaverage)		            		          end if		        else		          //Race is over so no need to attempt to geuss the average/pace		          racers(rankArray(i)).adjustedaverage = racers(rankArray(i)).average		        end if		        		      next		      		      for i=0 to UBound(rankArray)		        if i<>UBound(rankArray) then//As long as were not at the end~		          if racers(rankArray(i+1)).adjustedaverage<racers(rankArray(i)).adjustedaverage then		            temp = rankArray(i)		            rankArray(i) = rankArray(i+1)		            rankArray(i+1) = temp		            i=-1//reset it so it checks through the loop again incase one was greater		          elseif racers(rankArray(i+1)).adjustedaverage=racers(rankArray(i)).adjustedaverage then//if there is a tie in laps then we can play them by there current time on the lap		            time1=universalTicks - racers(rankArray(i+1)).timeSinceLastCheck		            time2=universalTicks - racers(rankArray(i)).timeSinceLastCheck		            if time1>time2 then//then the person ahead has the better time so we'll swap positions		              temp = rankArray(i)		              rankArray(i) = rankArray(i+1)		              rankArray(i+1) = temp		              i=-1//reset it so it checks through the loop again incase one was greater		            end if		          end if		        end if		      next		      		    else		      		      //Default ranking of total number of laps followed by time lap occurred		      for i=0 to UBound(rankArray)		        if i<>UBound(rankArray) then//As long as were not at the end~		          if racers(rankArray(i+1)).lapCount>racers(rankArray(i)).lapCount then		            temp = rankArray(i)		            rankArray(i) = rankArray(i+1)		            rankArray(i+1) = temp		            i=-1//reset it so it checks through the loop again incase one was greater		          elseif racers(rankArray(i+1)).lapCount=racers(rankArray(i)).lapCount then//if there is a tie in laps then we can play them by there current time on the lap		            //time1=Microseconds - racers(rankArray(i+1)).timeSinceLastCheck		            //time2=Microseconds - racers(rankArray(i)).timeSinceLastCheck		            //Use the last lap time to determine this		            //Check to make sure there are lap times		            if UBound(racers(rankArray(i+1)).lapTimes) > -1 then		              time1 = racers(rankArray(i+1)).lapTimes(UBound(racers(rankArray(i+1)).lapTimes))		            else		              //No lap times yet for this racer use a placeholder value		              time1 = racers(rankArray(i+1)).firstPass		            end if		            		            if UBound(racers(rankArray(i)).lapTimes) > -1 then		              time2 = racers(rankArray(i)).lapTimes(UBound(racers(rankArray(i)).lapTimes))		            else		              //No lap time yet use placeholder		              time2 = racers(rankArray(i)).firstPass		            end if		            		            if time1<time2 then//then the person ahead has the better time so we'll swap positions		              		              temp = rankArray(i)		              rankArray(i) = rankArray(i+1)		              rankArray(i+1) = temp		              i=-1//reset it so it checks through the loop again incase one was greater		            end if		          end if		        end if		      next		    end if		  end if		  		  		  		  		  		  		  for i=0 to UBound(rankArray)		    racers(rankArray(i)).currentPlace=i+1		  next		  		  		  //Check the new rank of the racer that just got a lap		  //If we got a -1 for the index we have no racer to check		  if index <> -1 then		    newrank = racers(index).currentPlace		    		    		    if RaceType <> "Free Play" then		      		      //Check to see what type of rank announcement we should do		      select case rankchangeannouncement		        		      case "Any Change"		        		        //Check rank, if it moved up build text to speak		        //Make sure racer is active		        if racers(index).Active = True and racers(index).lapCount > 1 then		          if newrank < oldrank then		            		            select case newrank		              		            case 1		              mainWindow.robotSpeak(racers(index).speakName + " " + G_Preferences.speechText.Value("takesthelead"), true)		            else		              mainWindow.robotSpeak(racers(index).speakName + " " + G_Preferences.speechText.Value("takes") + " " + intToRank(newrank) + " " + G_Preferences.speechText.Value("place"), false)		            end select		            		          end if		        end if		      case "None"		        		      else		        //Default method of announcing a lead change		        //Check who is now in first place, if it changed announce the change, only if we have more than 1 lap		        		        if racers(index).Active = True and racers(index).lapCount > 1 and newrank = 1 then		          if newrank < oldrank then		            mainWindow.robotSpeak(racers(index).speakName + " " + G_Preferences.speechText.Value("takesthelead"), true)		          end if		        end if		        		      end select		    end if		    		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function CopyRacer(racerid as String) As String		  //Copies racer and returns the new id of the copied racer		  		  dim tempRecord as RecordSet		  dim newRecord as RecordSet		  dim r as DatabaseRecord		  r = New DatabaseRecord		  		  // Get info from record		  tempRecord = G_database.SQLSelect("SELECT * FROM racer_table WHERE " + "racer_id == '" + racerid + "'")		  		  //Make sure we are not copying a bad record, the none record or a blank record		  if tempRecord.RecordCount < 1 or tempRecord.Field("name").StringValue = "None" or tempRecord.Field("name").StringValue = "none" or tempRecord.Field("name").StringValue = "NONE" or tempRecord.Field("name").StringValue = "" or tempRecord.Field("uid").StringValue = "" then		    //Bad record return		    MsgBox "Can not copy this racer"		    return ""		  end if		  		  //At this point we should have a good record to copy		  //We must first disable any racer with a matching UID		  G_Database.SQLExecute("UPDATE racer_table SET enabled = 0 WHERE uid == '" + tempRecord.Field("uid").StringValue + "'")		  G_Database.Commit		  		  for j as integer = 0 to Ubound(racers)		    if racers(j).UID = tempRecord.Field("uid").StringValue then		      racers(j).Enabled = False		    end if		  next		  		  		  		  //Now we create the new database record		  		  		  r.Column("name") = "Copy of " + tempRecord.Field("name").StringValue		  r.Column("name_pronounce") = tempRecord.Field("name_pronounce").StringValue		  r.Column("uid") = tempRecord.Field("uid").StringValue		  r.Column("scale") = tempRecord.Field("scale").StringValue		  r.Column("chassis") = tempRecord.Field("chassis").StringValue		  r.Column("class") = tempRecord.Field("class").StringValue		  r.Column("make") = tempRecord.Field("make").StringValue		  r.Column("model") = tempRecord.Field("model").StringValue		  r.Column("motor") = tempRecord.Field("motor").StringValue		  r.Column("crystal") = tempRecord.Field("crystal").StringValue		  r.Column("color") = tempRecord.Field("color").StringValue		  r.Column("image") = tempRecord.Field("image").StringValue		  r.Column("imagemask") = tempRecord.Field("imagemask").StringValue		  r.Column("email") = tempRecord.Field("email").StringValue		  r.BooleanColumn("enabled") = true		  r.BooleanColumn("hidden") = false		  		  G_Database.InsertRecord("racer_table", r)		  		  if G_Database.Error = false then		    G_Database.Commit		    		  else		    		    MsgBox "Error copying racer"		    G_Database.Rollback		    return ""		    		    		  end if		  		  //Select the new record and return the racer id of the new record		  newRecord = G_database.SQLSelect("SELECT * FROM racer_table WHERE " + "uid == '" + tempRecord.Field("uid").StringValue + "' AND name == 'Copy of " + tempRecord.Field("name").StringValue + "' AND enabled = 1")		  		  //Make sure we got a record		  if newRecord.RecordCount <> 1 then		    MsgBox "Error selecting copied racer"		    return ""		  end if		  		  //Create the racer in the control structure		  dim tempRaceCar as new raceCar		  tempRaceCar.Active=false		  tempRaceCar.RacerID=newRecord.Field("racer_id").IntegerValue		  tempRaceCar.UID=newRecord.Field("uid").StringValue		  tempRaceCar.theChassis=newRecord.Field("chassis").StringValue		  tempRaceCar.theClass=newRecord.Field("class").StringValue		  tempRaceCar.theMake=newRecord.Field("make").StringValue		  tempRaceCar.theModel=newRecord.Field("model").StringValue		  tempRaceCar.theMotor=newRecord.Field("motor").StringValue		  tempRaceCar.theName=newRecord.Field("name").StringValue		  tempRaceCar.theScale=newRecord.Field("scale").StringValue		  tempRaceCar.theCrystal=newRecord.Field("crystal").StringValue		  tempRaceCar.theColor=GM_StringToColor(newRecord.Field("color").StringValue)		  tempRaceCar.Enabled = True		  tempRaceCar.speakName=newRecord.Field("name_pronounce").StringValue		  tempRaceCar.theImage=GM_StringToPicture(DecodeBase64(newRecord.Field("image").StringValue))		  tempRaceCar.theImageMask=GM_StringToPicture(DecodeBase64(newRecord.Field("imagemask").StringValue))		  tempRaceCar.theEmail=newRecord.Field("email").StringValue		  		  racers.Append tempRaceCar		  		  //Pop up a message saying we saved		  dim tempWindow as new messageWindow		  tempWindow.message = t_copied		  tempWindow.timeLimit = 1		  		  return newRecord.Field("racer_id").StringValue		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function CreateProfile(database as realSQLDatabase, name as string) As boolean		  //Creates a profile in the database		  dim r as DatabaseRecord		  dim success as boolean		  		  success = false		  		  if name <> "none" and name <> "None" and name.Trim <> "" then		    		    //Database.SQLExecute("INSERT INTO raceprofile_table (name) VALUES ('" + name + "')")		    //Populate		    		    r = New DatabaseRecord		    		    r.Column("name")=name		    r.Column("racetype")=RaceType		    r.Column("rankmethod")=rankMethod		    r.IntegerColumn("numberoflaps")=numLaps		    r.DoubleColumn("timelimit")=timeLimit/60		    r.DoubleColumn("minlaptime")=minLapTime		    r.IntegerColumn("countdown")=countDownTime		    r.IntegerColumn("endcountdown")=endingCountDown		    r.Column("roundtype")=roundType		    r.IntegerColumn("timeout")=timeOut		    r.Column("lapindication")=lapIndication		    r.BooleanColumn("enablerankannouncement")=G_Preferences.readB("rankAnnoucements")		    r.IntegerColumn("rankinterval")=G_Preferences.readI("rankAnnInterval")		    r.BooleanColumn("autodeleteracers")=true		    r.BooleanColumn("staggeredstart")=G_Preferences.readB("staggeredStart")		    r.BooleanColumn("endinghorn")=endinghorn		    r.Column("countdowntype")=countdowntype		    r.Column("rankchangeannouncement")=rankchangeannouncement		    r.Column("bestlapannouncement")=bestlapannouncement		    database.InsertRecord("raceprofile_table",r)		    //Insert record does a commit, do not need another this will just commit nothing which in turn will never result in an error		    //database.Commit		    		    if database.Error = False then		      success = true		      		    end if		    		    Database.Commit		    		  end if		  return success		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function DeleteProfile(database as realSQLDatabase, name as string) As boolean		  //Deletes the profile out of the database		  dim success as boolean		  success = false		  		  		  if name <> "none" and name <> "None" and name.trim <> "" and name <> t_none then		    Database.SQLExecute("DELETE FROM raceprofile_table WHERE name = '" + name + "'")		    database.Commit		    		    //Delete the row out of the control on main page		    if database.Error = false then		      success = true		      		    end if		  end if		  		  return success		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub DeleteRacerFromRace(racerid as string, rdatabase as REALSQLDatabase, eventid as string)		  		  		  		  RecalculateRaceValues(rdatabase, eventid)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function FindActiveRacerIndexes() As integer()		  dim i as Integer		  dim activeIndexes(-1) as Integer		  		  for i=0 to UBound(racers)		    if racers(i)<>nil then		      if racers(i).Active=true then		        activeIndexes.Append i		      end if		    end if		  next		  		  return activeIndexes		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GenerateHTMLReport(event_name as string, emaillogo as boolean) As string		  dim xmlReport as string		  xmlReport = GenerateXMLReport(event_name, emaillogo)		  		  dim iFilestream as TextInputStream		  dim xslFile as FolderItem = GetFolderItem("reports").Child("race.xsl")		  dim xml as New XmlDocument		  		  iFilestream = TextInputStream.Open(xslFile)		  dim xslText as string = iFilestream.ReadAll		  		  xml.LoadXml(xmlReport)		  		  dim transformedXml as string		  transformedXml = xml.Transform(xslText)		  		  return transformedXml		  		Exception XmlException		  MsgBox "An XML Error Occured, the document was not transformed correctly"		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GenerateXMLReport(event_name as String, emaillogo as boolean) As String		  dim event_id as string = getEventID(event_name)		  dim race_type as string		  dim num_laps as string		  dim time_limit as string		  dim round_type as string		  dim racer_id as string		  dim lap_time as string		  dim lap_number as string		  dim lap_rank as string		  dim time_at_lap as string		  dim rs as RecordSet		  dim ps as RecordSet		  dim qs as RecordSet		  dim iFilestream as TextInputStream		  dim pi as XmlProcessingInstruction		  dim outputXML as string		  		  rs = G_Database.SQLSelect("SELECT * FROM race_table WHERE event_name=='"+event_name+"'")		  if rs<>nil then		    		    select case rs.Field("race_type").StringValue		    case "Timed"		      race_type = t_timed		    case "Lap"		      race_type = t_lap		    case "Lap and Timed"		      race_type = t_lapandtimed		    case "Staggered Time"		      race_type = t_staggeredtime		    case "Free Play"		      race_type = t_freeplay		    case "Drag"		      race_type = t_drag		    end select		    		    num_laps = rs.Field("num_laps").StringValue		    time_limit = rs.Field("time_limit").StringValue		    		    select case rs.Field("round_type").StringValue		    case "Practice"		      round_type = t_practice		    case "Heat"		      round_type = t_heat		    case "Qualifier"		      round_type = t_qualifier		    case "Main"		      round_type = t_main		    end select		    		  else		    MsgBox "Error getting database info for event while trying to make report."+EndOfLine+EndOfLine+G_Database.ErrorMessage		  end if		  		  dim indentXslFile as FolderItem = GetFolderItem("reports").Child("indent.xsl")		  		  iFilestream = TextInputStream.Open(indentXslFile)		  dim xslIndentText as string = iFilestream.ReadAll		  		  dim xml as new XmlDocument//creates an empty xml document~		  pi = xml.CreateProcessingInstruction("xml-stylesheet", "type='text/xsl' href='race.xsl'") //adds sytlesheet info so browsers can render XML directly		  xml.AppendChild pi		  		  //All the nodes involved are below~		  dim rootNode,clubNode,eventNode,summaryNode,racerNode as XmlNode		  dim racerNameNode,positionNode,lapsNode,timeNode,averageNode,bestNode,lapsLeadingNode as XmlNode		  dim eventNameNode,typeNode,lapLimitNode,timeLimitNode,roundTypeNode as XmlNode		  dim clubNameNode,clubImageNode as XmlNode		  dim lapInfoNode,lapNumberNode,lapTimeNode as XmlNode		  dim lapRankNode,timeAtLapNode as XmlNode		  dim URIattr as XmlAttribute		  dim textNode, textPosition, textLaps, textTime, textAverage, textBest, textLapsLeading, textName, textLapTimes, textLap, textRaceResults as XmlNode		  dim clubLogoNode as XmlNode		  		  rootNode = xml.AppendChild(xml.CreateElement("race"))		  		  clubNode = rootNode.AppendChild(xml.CreateElement("club"))		  clubNameNode = clubNode.AppendChild(xml.CreateElement("name"))		  clubNameNode.AppendChild(xml.CreateTextNode(G_Preferences.readS("clubName")))//stores the club name to the file~		  		  clubImageNode = clubNode.AppendChild(xml.CreateElement("image"))		  URIattr = xml.CreateAttribute("URI")		  if emaillogo = False then		    URIattr.value =  G_Preferences.clubLogoPath		  else		    URIattr.value =  "http://www.flipsideracing.org/downloads/exampleLogo.jpg"		  end if		  clubImageNode.SetAttributeNode(URIattr)		  		  //We will insert the logo directly into the xml so that the xml report is complete without external files		  //Method does not work with Outlook or GMAIL		  //if G_Preferences.clubLogo <> Nil then		  //dim rawPic as string		  //dim encodedPic as string		  //rawPic = G_Preferences.clubLogo.GetData(Picture.FormatJPEG,99)		  //encodedPic = EncodeBase64(rawPic,0)		  //clubLogoNode = clubNode.AppendChild(xml.CreateElement("clubLogo"))		  //clubLogoNode.AppendChild(xml.CreateTextNode(encodedPic))		  //end if		  		  eventNode = rootNode.AppendChild(xml.CreateElement("event"))		  eventNameNode = eventNode.AppendChild(xml.CreateElement("name"))		  eventNameNode.AppendChild(xml.CreateTextNode(event_name))		  typeNode = eventNode.AppendChild(xml.CreateElement("type"))		  typeNode.AppendChild(xml.CreateTextNode(race_type))		  lapLimitNode = eventNode.AppendChild(xml.CreateElement("lap_limit"))		  lapLimitNode.AppendChild(xml.CreateTextNode(num_laps))		  timeLimitNode = eventNode.AppendChild(xml.CreateElement("time_limit"))		  timeLimitNode.AppendChild(xml.CreateTextNode(time_limit))		  roundTypeNode = eventNode.AppendChild(xml.CreateElement("round_type"))		  roundTypeNode.AppendChild(xml.CreateTextNode(round_type))		  		  //Add entries to be used for translation		  textNode = rootNode.AppendChild(xml.CreateElement("translations"))		  textPosition = textNode.AppendChild(xml.CreateElement("position"))		  textPosition.AppendChild(xml.CreateTextNode(t_position))		  textLaps = textNode.AppendChild(xml.CreateElement("laps"))		  textLaps.AppendChild(xml.CreateTextNode(t_laps))		  textTime = textNode.AppendChild(xml.CreateElement("time"))		  textTime.AppendChild(xml.CreateTextNode(t_time))		  textAverage = textNode.AppendChild(xml.CreateElement("average"))		  textAverage.AppendChild(xml.CreateTextNode(t_average))		  textBest = textNode.AppendChild(xml.CreateElement("best"))		  textBest.AppendChild(xml.CreateTextNode(t_best))		  textLapsLeading = textNode.AppendChild(xml.CreateElement("laps_leading"))		  textLapsLeading.AppendChild(xml.CreateTextNode(t_lapsleading))		  textName = textNode.AppendChild(xml.CreateElement("name"))		  textName.AppendChild(xml.CreateTextNode(t_name))		  textLapTimes = textNode.AppendChild(xml.CreateElement("lap_times"))		  textLapTimes.AppendChild(xml.CreateTextNode(t_laptimes))		  textLap = textNode.AppendChild(xml.CreateElement("lap"))		  textLap.AppendChild(xml.CreateTextNode(t_lap))		  textRaceResults = textNode.AppendChild(xml.CreateElement("race_results"))		  textRaceResults.AppendChild(xml.CreateTextNode(t_raceresults))		  		  summaryNode = rootNode.AppendChild(xml.CreateElement("summary"))		  		  ps = G_Database.SQLSelect("SELECT * FROM summary_table WHERE event_id=='"+event_id+"' ORDER BY rank ASC")		  		  if ps <> nil then		    while not ps.EOF		      racer_id =ps.Field("racer_id").StringValue//this should hold the racerID		      racerNode = summaryNode.AppendChild(xml.CreateElement("racer"))		      racerNameNode = racerNode.AppendChild(xml.CreateElement("name"))		      racerNameNode.AppendChild(xml.CreateTextNode(GetRacerName(racer_id)))		      positionNode = racerNode.AppendChild(xml.CreateElement("position"))		      positionNode.AppendChild(xml.CreateTextNode(ps.Field("rank").StringValue))		      //Must get max laps now		      qs = G_Database.SQLSelect("SELECT MAX(lap_number) FROM laps_table WHERE racer_id=='"+racer_id+"' AND event_id=='"+event_id+"'")		      if qs<> nil then		        lapsNode = racerNode.AppendChild(xml.CreateElement("laps"))		        lapsNode.AppendChild(xml.CreateTextNode(qs.Field("MAX(lap_number)").StringValue))		      end if		      qs = G_Database.SQLSelect("SELECT MAX(lap_time) FROM laps_table WHERE racer_id=='"+racer_id+"' AND event_id=='"+event_id+"'")		      //Must get max time		      if qs<> nil then		        timeNode = racerNode.AppendChild(xml.CreateElement("time"))		        timeNode.AppendChild(xml.CreateTextNode(secondsToTime(qs.Field("MAX(lap_time)").DoubleValue,G_Preferences.lapTimeFormat)))		      end if		      averageNode = racerNode.AppendChild(xml.CreateElement("average"))		      averageNode.AppendChild(xml.CreateTextNode(ps.Field("average_time").StringValue))		      bestNode = racerNode.AppendChild(xml.CreateElement("best"))		      bestNode.AppendChild(xml.CreateTextNode(ps.Field("best_lap").StringValue + "/" + ps.Field("best_time").StringValue))		      lapsLeadingNode = racerNode.AppendChild(xml.CreateElement("lapsleading"))		      lapsLeadingNode.AppendChild(xml.CreateTextNode(ps.Field("laps_leading").StringValue))		      		      rs = G_Database.SQLSelect("SELECT * FROM laps_table WHERE event_id=='"+event_id+"' AND racer_id=='"+racer_id+"';")		      if rs<>nil then		        while not rs.EOF		          lap_Time = rs.Field("time_at_lap").StringValue		          lap_Number = rs.Field("lap_number").StringValue		          time_at_lap = rs.Field("lap_time").StringValue		          lap_rank = rs.Field("lap_place").StringValue		          		          if cdbl(lap_number)<>0 then//no need to show the '0th' lap, nothing there, it's only there for graphing purposes.		            lapInfoNode = racerNode.AppendChild(xml.CreateElement("lapinfo"))//creates the lap info elements		            lapNumberNode = lapInfoNode.AppendChild(xml.CreateElement("lapnumber"))		            lapNumberNode.AppendChild(xml.CreateTextNode(lap_number))		            lapTimeNode = lapInfoNode.AppendChild(xml.CreateElement("laptime"))		            lapTimeNode.AppendChild(xml.CreateTextNode(lap_time))		            timeAtLapNode = lapInfoNode.AppendChild(xml.CreateElement("timeatlap"))		            timeAtLapNode.AppendChild(xml.CreateTextNode(time_at_lap))		            lapRankNode = lapInfoNode.AppendChild(xml.CreateElement("laprank"))		            lapRankNode.AppendChild(Xml.CreateTextNode(lap_rank))		            		          end if		          rs.MoveNext		        wend		      else		        MsgBox "Error getting lap_table info from database"		      end if		      ps.MoveNext		    wend		  end if		  		  outputXML = xml.Transform(xslIndentText)		  		  iFilestream.Close		  		  Return outputXML		  		Exception XmlException		  MsgBox "An XML Error Occured, the XML file failed to be created"		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getEventID(event_name as string) As string		  dim rs as RecordSet		  rs = G_Database.SQLSelect("SELECT * FROM race_table WHERE event_name=='"+event_name+"'")		  		  if rs<>nil then		    return rs.Field("event_id").StringValue		  else		    MsgBox "Error, no such event in race_table"		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GetRacerIDS(event_id as string, rdatabase as REALSQLDatabase) As string()		  dim rs as RecordSet		  dim racer_ids(-1) as string		  		  rs = rdatabase.SQLSelect("SELECT * FROM summary_table WHERE event_id=='"+event_id+"'")		  		  if rs<>nil then		    while not rs.EOF		      racer_ids.Append rs.Field("racer_id").StringValue		      rs.MoveNext		    wend		    return racer_ids		  else		    MsgBox "Error, no records returned in summary_table"		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function GetRacerName(racer_id as string) As string		  dim rs as RecordSet		  dim name as string		  rs = G_Database.SQLSelect("SELECT * FROM racer_table WHERE racer_id=='"+racer_id+"'")		  if rs<>nil then		    name=rs.Field("name").StringValue		    return name		  else		    MsgBox "Error finding racer name"		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function intToRank(rank as integer) As String		  //This method takes the rank number and converts it to the appropriate text for the current language		  dim rankString as string		  		  select case rank		    		  case 1		    rankString = s_1st		  case 2		    rankString = s_2nd		  case 3		    rankString = s_3rd		  case 4		    rankString = s_4th		  case 5		    rankString = s_5th		  case 6		    rankString = s_6th		  case 7		    rankString = s_7th		  case 8		    rankString = s_8th		  case 9		    rankString = s_9th		  case 10		    rankString = s_10th		  case 11		    rankString = s_11th		  case 12		    rankString = s_12th		  case 13		    rankString = s_13th		  case 14		    rankString = s_14th		  case 15		    rankString = s_15th		  case 16		    rankString = s_16th		  case 17		    rankString = s_17th		  case 18		    rankString = s_18th		  case 19		    rankString = s_19th		  case 20		    rankString = s_20th		  case 21		    rankString = s_21st		  case 22		    rankString = s_22nd		  case 23		    rankString = s_23rd		  case 24		    rankString = s_24th		  end select		  		  return rankString		  		  		  		  		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ListProfiles(database as realSQLDatabase) As string()		  //Query database for list of profiles, first item in string must be none		  dim returnstring() as string		  dim rs as RecordSet		  dim i as integer		  		  rs = database.SQLSelect("SELECT * FROM raceprofile_table")		  		  //Get the names from the database		  if rs <> nil then		    for i = 1 to rs.RecordCount		      //while not rs.EOF		      returnstring.Append(rs.Field("name").StringValue)		      rs.MoveNext		      //wend		    next		  end if		  		  returnstring.Sort		  		  //returnstring.Insert(0,t_none)		  returnstring.Insert(0,"")		  		  return returnstring		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function LiveRankString() As string		  //This method is used to build a string used for text to speech of the current or final ranks		  dim i as integer		  dim stringout as string		  dim ranks() as Integer		  dim names() as string		  dim laps() as integer		  dim besttime() as double		  dim pace() as double		  dim maxrank as integer		  		  //Create 2 arrays to be sorted		  //Array will only contain racers that have completed a lap		  for i = 0 to UBound(activeRacers)		    if activeRacers(i).lapCount > 0 then		      ranks.Append(activeRacers(i).currentPlace)		      names.Append(activeRacers(i).speakName)		      laps.Append(activeRacers(i).lapCount)		      besttime.Append(activeRacers(i).best_time)		      pace.Append(activeRacers(i).Pace)		    end if		  next		  		  //Sort array by ranks		  ranks.SortWith(names, laps, besttime, pace)		  		  //See how many there are, do not announce more than whatever has been defined as the max rank to announce		  if UBound(names) < G_Preferences.readI("maxRankAnnounced") then		    maxrank = UBound(names)		  else		    maxrank = G_Preferences.readI("maxRankAnnounced")		  end if		  		  //Now create the string to be passed back that contains text to be spoken of ranks		  for i = 0 to maxrank		    //Make sure they have a lap first		    if laps(i) > 0 then		      		      if rankMethod = "Best Lap" then		        		        select case ranks(i)		          		        case 1		          stringout = stringout + " " + G_Preferences.speechText.Value("currentlyin") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " , " + names(i) + " " + G_Preferences.speechText.Value("with") + " " + format(besttime(i), G_Preferences.lapTimeFormat) + " " + G_Preferences.speechText.Value("seconds") + ", "		        case 2		          stringout = stringout + " " + G_Preferences.speechText.Value("followedby") + " " + names(i) + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " " + G_Preferences.speechText.Value("with") + " " + format(besttime(i), G_Preferences.lapTimeFormat) + " " + G_Preferences.speechText.Value("seconds") + ", "		        case is > 2		          stringout = stringout + " " + names(i) + " " + G_Preferences.speechText.Value("in") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " " + G_Preferences.speechText.Value("with") + " " + format(besttime(i), G_Preferences.lapTimeFormat) + " " + G_Preferences.speechText.Value("seconds") + ", "		        end Select		        		        		      elseif RaceType = "Staggered Time" then		        		        select case ranks(i)		          		        case 1		          stringout = stringout + " " + G_Preferences.speechText.Value("currentlyin") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " , " + names(i) + ", " + G_Preferences.speechText.Value("onpacefor") + " " + format(pace(i), "#") + " " + G_Preferences.speechText.Value("laps") + ", "		        case 2		          stringout = stringout + " " + G_Preferences.speechText.Value("followedby") + " " + names(i) + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " , " + G_Preferences.speechText.Value("onpacefor") + " " + format(pace(i), "#") + " " + G_Preferences.speechText.Value("laps") + ", "		        case is > 2		          stringout = stringout + " " + names(i) + " " + G_Preferences.speechText.Value("in") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " , " + G_Preferences.speechText.Value("onpacefor") + " " + format(pace(i), "#") + " " + G_Preferences.speechText.Value("laps") + ", "		        end Select		        		      else		        		        select case ranks(i)		          		        case 1		          stringout = stringout + " " + G_Preferences.speechText.Value("currentlyin") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " , " + names(i) + " " + G_Preferences.speechText.Value("with") + " " + str(laps(i)) + " " + G_Preferences.speechText.Value("laps") + ", "		        case 2		          stringout = stringout + " " + G_Preferences.speechText.Value("followedby") + " " + names(i) + " " + G_Preferences.speechText.Value("in") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " " + G_Preferences.speechText.Value("with") + " " + str(laps(i)) + " " + G_Preferences.speechText.Value("laps") + ", "		        case is > 2		          stringout = stringout + " " + names(i) + " " + G_Preferences.speechText.Value("in") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " " + G_Preferences.speechText.Value("with") + " " + str(laps(i)) + " " + G_Preferences.speechText.Value("laps") + ", "		        end Select		        		      end if		    end if		  next		  		  //Pass the result back		  return stringout		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub LoadProfile(database as realSQLDatabase, name as string)		  //Load a specified profile into the object		  dim rs as RecordSet		  		  //Make sure we have selected a record		  if name <> "none" then		    rs = Database.SQLSelect("SELECT * FROM raceprofile_table WHERE name='" + name + "'")		    //Make sure we got a result		    if rs <> nil then		      //while not rs.EOF		      //Actually do stuff here		      RaceType = rs.Field("racetype").StringValue		      numLaps = rs.Field("numberoflaps").IntegerValue		      timeLimit = rs.Field("timelimit").DoubleValue		      minLapTime = rs.Field("minlaptime").DoubleValue		      countDownTime = rs.Field("countdown").IntegerValue		      endingCountDown = rs.Field("endcountdown").IntegerValue		      roundType = rs.Field("roundtype").StringValue		      timeOut = rs.Field("timeout").IntegerValue		      lapIndication = rs.Field("lapindication").StringValue		      endinghorn = rs.Field("endinghorn").BooleanValue		      countdowntype = rs.Field("countdowntype").StringValue		      rankchangeannouncement = rs.Field("rankchangeannouncement").StringValue		      bestlapannouncement = rs.Field("bestlapannouncement").StringValue		      //Fixme, these should be moved to the raceobject		      G_Preferences.rankAnnoucements = rs.Field("enablerankannouncement").BooleanValue		      G_Preferences.write("rankAnnoucements",rs.Field("enablerankannouncement").BooleanValue)		      G_Preferences.rankAnnInterval = rs.Field("rankinterval").IntegerValue		      G_Preferences.write("rankAnnInterval",rs.Field("rankinterval").IntegerValue)		      		      G_Preferences.write("staggeredStart", rs.Field("staggeredstart").BooleanValue)		      if rs.Field("rankmethod").StringValue = "" then		        rankMethod = "Total Laps"		      else		        rankMethod = rs.Field("rankmethod").StringValue		      end if		      //wend		    end if		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub MergeRacerLap(rdatabase as realSQLDatabase, eventid as string, racerid as string, lapnumber as integer)		  //This method will be used to merge 2 laps together, this is needed in case someone gets 2 laps instead of 1		  //The lap is merged with the lap after it unless it is the last lap that is being called, in that case merge the lap with the lap before		  		  //This method only updates the lap numbers and times in the database, all other values must be updated using the RecalculateRaceValues method		  		  dim rs as RecordSet		  		  //Get Lap information for that racer and store to the temp racer~		  rs = rdatabase.SQLSelect("SELECT DISTINCT lap_number,lap_time,time_at_lap FROM laps_table WHERE event_id=='"+eventid+"' AND racer_id=='"+racerid+"';")		  		  dim temp as new raceCar		  dim lap_number as integer		  		  while rs.EOF=false//read in the data to create the racer info~		    lap_number = rs.Field("lap_number").IntegerValue		    if lap_number<>0 then		      temp.lapTimes.Append rs.Field("lap_time").DoubleValue		      temp.timeAtLap.Append rs.Field("time_at_lap").DoubleValue		    end if		    rs.MoveNext		  wend		  		  if lapnumber > UBound(temp.laptimes) + 1 then		    //Not a valid lap, out of bounds		    MsgBox "Not a valid lap"		    //Return instead of doing anything		    Return		  end if		  		  		  //Make sure we do not have an extra 0		  if UBound(temp.lapTimes) > 0 then		    if temp.lapTimes(0) = 0 then		      temp.lapTimes.Remove(0)		      temp.timeAtLap.Remove(0)		    end if		  end if		  		  dim timeatlap as double		  		  //Check to make sure there is more than 1 lap		  if temp.timeAtLap.Ubound < 1 then		    return		  end if		  		  		  //Check the number of laps against which lap needs merged, if they are equal we merge with the previous lap, otherwise we merge with the lap after it		  if lapnumber = temp.timeAtLap.Ubound + 1 then		    //They want to merge the last lap so we merge with the lap before it		    timeatlap = temp.timeatlap(lapnumber - 1)		    temp.lapTimes(lapnumber - 2) = temp.lapTimes(lapnumber - 2) + timeatlap		    temp.timeAtLap(lapnumber - 2) = temp.timeAtLap(lapnumber - 2) + timeatlap		    		    		    //Delete the lap		    temp.timeAtLap.Remove(lapnumber - 1)		    temp.lapTimes.Remove(lapnumber - 1)		    		  else		    //We merge with the lap after it		    timeatlap = temp.timeatlap(lapnumber - 1)		    //No need to adjust the time the lap occured at since we delete the lap before it out of the records		    //temp.lapTimes(lapnumber) = temp.lapTimes(lapnumber) + timeatlap		    temp.timeAtLap(lapnumber) = temp.timeAtLap(lapnumber) + timeatlap		    		    //Delete the lap		    temp.timeAtLap.Remove(lapnumber - 1)		    temp.lapTimes.Remove(lapnumber - 1)		    		  end if		  		  //Now we drop that racers laps from the database and add back the adjusted ones, lag will be calculated later		  rdatabase.SQLExecute("DELETE FROM laps_table WHERE racer_id=='"+racerid+"' AND event_id=='"+eventid+"'")		  //Only commit after the full transaction is executed		  //G_Database.Commit		  if rdatabase.Error = True then		    MsgBox "Error deleting from laps_table"		    rdatabase.Rollback		    return		  end if		  		  //Now insert the laps back into the laps table		  dim query as string		  dim k as integer		  dim j as integer		  j = 0		  		  //Laps Table Information to be added~		  query=""//reset it since I'm using the same variable again		  		  		  //FixMe, cheesy way of not inserting the 0 lap into the database, start k at 1 instead of 0		  for k=0 to UBound(temp.timeAtLap)//Lap Counts array will match the others, so no need for another inner loop.		    j = j + 1		    query=query+_		    "INSERT INTO laps_table(racer_id,event_id,lap_number,lap_time,time_at_lap) VALUES ('"+_		    racerid+"','"+_		    eventid+"','"+_		    str(j)+"','"+_		    str(temp.lapTimes(k))+"','"+_		    str(temp.timeAtLap(k))+"');"		  next		  		  //Check to make sure we have a query to run		  if query <> "" then		    rdatabase.SQLExecute(query)		    		    		    if rdatabase.Error=true then		      MsgBox "Error inserting racers data to laps_table"+EndOfLine+EndOfLine+G_Database.ErrorMessage+EndOfLine+query		      rdatabase.Rollback		    else		      rdatabase.Commit()//save changes~		    end if		  end if		  		  //Now that we have commited the new lap times it is time to recalculate all other values		  RecalculateRaceValues(rdatabase, eventid)		  		  		  		  		  		  		  		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub RacerInventoryReport(gcclublogopath as string, gcclubname as string)		  //Use this method to export a racer report, this is an xml file formatted by an xsl		  dim invdirname as string		  dim oFilestream as TextOutputStream		  dim iFilestream as TextInputStream		  dim pi as XmlProcessingInstruction		  dim d as new date		  		  invdirname = "Racer Inventory " + replaceall(d.SQLDateTime,":","-")		  dim f as FolderItem =  GetFolderItem("reports").Child(invdirname)//because on mac you can't use the colon~		  f.CreateAsFolder		  		  dim xslFile as FolderItem = GetFolderItem("reports").Child("racerinventory.xsl")		  dim indentXslFile as FolderItem = GetFolderItem("reports").Child("indent.xsl")		  		  iFilestream = TextInputStream.Open(xslFile)		  dim xslText as string = iFilestream.ReadAll		  		  iFilestream = TextInputStream.Open(indentXslFile)		  dim xslIndentText as string = iFilestream.ReadAll		  		  if f.Exists=true and f<>nil then		    dim xml as new XmlDocument//creates an empty xml document~		    pi = xml.CreateProcessingInstruction("xml-stylesheet", "type='text/xsl' href='racerinventory.xsl'") //adds sytlesheet info so browsers can render XML directly		    xml.AppendChild pi		    		    //copy xsl file to report directory		    xslFile.CopyFileTo f		    		    //All the nodes involved are below~		    dim rootNode,clubNode,inventoryNode,racerNode as XmlNode		    dim racerNameNode as XmlNode		    dim clubNameNode,clubImageNode as XmlNode		    dim URIattr as XmlAttribute		    dim classNode,chassisNode,makeNode,modelNode,motorNode,uidNode,crystalNode as XmlNode		    dim textNode, textRacerInventory, textName, textCrystal, textClass, textChassis, textMake, textModel, textMotor, textUID as XmlNode		    		    		    rootNode = xml.AppendChild(xml.CreateElement("racers"))		    		    clubNode = rootNode.AppendChild(xml.CreateElement("club"))		    clubNameNode = clubNode.AppendChild(xml.CreateElement("name"))		    clubNameNode.AppendChild(xml.CreateTextNode(gcclubname))//stores the club name to the file~		    		    clubImageNode = clubNode.AppendChild(xml.CreateElement("image"))		    URIattr = xml.CreateAttribute("URI")		    URIattr.value =  gcclublogopath		    clubImageNode.SetAttributeNode(URIattr)		    		    //Add entries to be used for translation		    textNode = rootNode.AppendChild(xml.CreateElement("translations"))		    textRacerInventory = textNode.AppendChild(xml.CreateElement("racer_inventory"))		    textRacerInventory.AppendChild(xml.CreateTextNode(t_racerinventory))		    textName = textNode.AppendChild(xml.CreateElement("name"))		    textName.AppendChild(xml.CreateTextNode(t_name))		    textCrystal = textNode.AppendChild(xml.CreateElement("crystal"))		    textCrystal.AppendChild(xml.CreateTextNode(t_crystal))		    textClass = textNode.AppendChild(xml.CreateElement("class"))		    textClass.AppendChild(xml.CreateTextNode(t_class))		    textChassis = textNode.AppendChild(xml.CreateElement("chassis"))		    textChassis.AppendChild(xml.CreateTextNode(t_chassis))		    textMake = textNode.AppendChild(xml.CreateElement("make"))		    textMake.AppendChild(xml.CreateTextNode(t_make))		    textModel = textNode.AppendChild(xml.CreateElement("model"))		    textModel.AppendChild(xml.CreateTextNode(t_model))		    textMotor = textNode.AppendChild(xml.CreateElement("motor"))		    textMotor.AppendChild(xml.CreateTextNode(t_motor))		    textUID = textNode.AppendChild(xml.CreateElement("uid"))		    textUID.AppendChild(xml.CreateTextNode(t_uid))		    		    inventoryNode = rootNode.AppendChild(xml.CreateElement("inventory"))		    		    if UBound(racers) > -1 then		      for i as Integer = 0 to Ubound(racers)		        		        racerNode = inventoryNode.AppendChild(xml.CreateElement("racer"))		        racerNameNode = racerNode.AppendChild(xml.CreateElement("name"))		        racerNameNode.AppendChild(xml.CreateTextNode(racers(i).theName))		        classNode = racerNode.AppendChild(xml.CreateElement("class"))		        classNode.AppendChild(xml.CreateTextNode(racers(i).theClass))		        chassisNode = racerNode.AppendChild(xml.CreateElement("chassis"))		        chassisNode.AppendChild(xml.CreateTextNode(racers(i).theChassis))		        makeNode = racerNode.AppendChild(xml.CreateElement("make"))		        makeNode.AppendChild(xml.CreateTextNode(racers(i).theMake))		        modelNode = racerNode.AppendChild(xml.CreateElement("model"))		        modelNode.AppendChild(xml.CreateTextNode(racers(i).theModel))		        motorNode = racerNode.AppendChild(xml.CreateElement("motor"))		        motorNode.AppendChild(xml.CreateTextNode(racers(i).theMotor))		        uidNode = racerNode.AppendChild(xml.CreateElement("uid"))		        uidNode.AppendChild(xml.CreateTextNode(racers(i).UID))		        crystalNode = racerNode.AppendChild(xml.CreateElement("crystal"))		        crystalNode.AppendChild(xml.CreateTextNode(racers(i).theCrystal))		        		      next		    end if		    		    dim transformedXml as string		    transformedXml = xml.Transform(xslText)//we now the fancy form of the xml ready to save as html~		    		    dim outputRaceTransformFile as FolderItem = GetFolderItem("reports").Child(invdirname).Child("racerinventory.html")		    oFilestream = TextOutputStream.Create(outputRaceTransformFile)		    oFilestream.Write(transformedXml)		    		    //Switch to copying file instead of reading into picture object and writing to file		    //dim logoFile as FolderItem = GetFolderItem("reports").Child(new_event_name).Child(G_Preferences.clubLogoPath)		    //logoFile.SaveAsPicture(G_Preferences.clubLogo)//saves a copy of the club logo to the report folder for that race so the xsl works~		    dim clublogodest as FolderItem = GetFolderItem("reports").Child(invdirname)		    dim clublogosource as FolderItem = GetFolderItem("club_logo").Child(gcclublogopath)		    clublogosource.CopyFileTo(clublogodest)		    		    dim indentXmlFile as FolderItem = GetFolderItem("reports").Child(invdirname).Child("racerinventory.xml")		    //Fixme		    //Do not indent file at this time as IE does not like the results		    //dim indentedXml as string = xml.Transform(xslIndentText)		    dim indentedXml as string = xml.Transform(xslIndentText)		    oFilestream = TextOutputStream.Create(indentXmlFile)		    oFilestream.Write(indentedXml)//this is purely so we have a copy of the xml, it's tecnically not needed in the folder		    		    oFilestream.Close//now where were done with it		    iFilestream.Close//were done with this too		    		    //Now lets launch the report in there browser so they can see!		    //outputRaceTransformFile.Launch()		    If TargetWin32 then		      ShowURL(outputRaceTransformFile.URLPath)		    elseif TargetMacOS then		      ShowURL(outputRaceTransformFile.URLPath)		    elseif TargetLinux then		      dim s as shell		      s = new shell		      s.execute "xdg-open " + outputRaceTransformFile.URLPath		    end if		    		  else		    MsgBox "Error getting folder item!"		  end if		  		Exception XmlException		  MsgBox "An XML Error Occured, the document was not transformed correctly"		  		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function RankString() As string		  //This method is used to build a string used for text to speech of the current or final ranks		  dim i as integer		  dim stringout as string		  dim ranks() as Integer		  dim names() as string		  dim laps() as integer		  dim besttime() as double		  dim maxrank as integer		  		  //Create 2 arrays to be sorted		  //Array will only contain racers that have completed a lap		  for i = 0 to UBound(activeRacers)		    if activeRacers(i).lapCount > 0 then		      ranks.Append(activeRacers(i).currentPlace)		      names.Append(activeRacers(i).speakName)		      laps.Append(activeRacers(i).lapCount)		      besttime.Append(activeRacers(i).best_time)		    end if		  next		  		  //Sort array by ranks		  ranks.SortWith(names, laps, besttime)		  		  //See how many there are, do not announce more than whatever has been defined as the max rank to announce		  if UBound(names) < G_Preferences.readI("maxRankAnnounced") then		    maxrank = UBound(names)		  else		    maxrank = G_Preferences.readI("maxRankAnnounced")		  end if		  		  //Now create the string to be passed back that contains text to be spoken of ranks		  for i = 0 to maxrank		    		    //Check what type of ranking is done to determine how the rank string will sound		    if rankMethod = "Best Lap" then		      		      select case ranks(i)		        		      case 1,2,3		        stringout = stringout + " " + G_Preferences.speechText.Value("in") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " " + names(i) + " " + G_Preferences.speechText.Value("with") + " " + format(besttime(i), G_Preferences.lapTimeFormat) + " " + G_Preferences.speechText.Value("seconds") + ", "		        		      case is > 3		        stringout = stringout + " " + G_Preferences.speechText.Value("in") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " " + names(i) + " " + format(besttime(i), G_Preferences.lapTimeFormat) + " " + G_Preferences.speechText.Value("seconds") + ", "		      end Select		      		    else		      		      stringout = stringout + " " + G_Preferences.speechText.Value("in") + " " + intToRank(ranks(i)) + " " + G_Preferences.speechText.Value("place") + " " + names(i) + " " + G_Preferences.speechText.Value("with") + " " + str(laps(i)) + " " + G_Preferences.speechText.Value("laps") + ", "		      		    end if		    		    		  next		  		  //Pass the result back		  return stringout		  		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ReassignRacerResults(oldracer as String, newracer as String, eventid as String) As Boolean		  dim status as boolean		  status = false		  		  //To reassign the results we need to update the laps_table, laps_backup_table, race_racer_table and the summary_table		  		  //First commit any unprocessed transactions, this should not be necessary but better safe than sorry		  G_Database.Commit		  		  		  G_Database.SQLExecute("UPDATE laps_table SET racer_id = '" + newracer + "' WHERE racer_id == '" + oldracer + "'  AND event_id == '" + eventid + "'")		  		  if G_Database.Error = true then		    MsgBox "Error updating laps_table records"		    G_Database.Rollback		    return status		  end if		  		  G_Database.SQLExecute("UPDATE laps_backup_table SET racer_id = '" + newracer + "' WHERE racer_id == '" + oldracer + "'  AND event_id == '" + eventid + "'")		  		  if G_Database.Error = true then		    MsgBox "Error updating laps_backup_table records"		    G_Database.Rollback		    return status		  end if		  		  //G_Database.SQLExecute("UPDATE race_racer_table SET racer_id = '" + newracer + "' WHERE racer_id == '" + oldracer + "'  AND event_id == '" + eventid + "'")		  		  //if G_Database.Error = true then		  //MsgBox "Error updating race_racer_table records"		  //G_Database.Rollback		  //return status		  //end if		  		  G_Database.SQLExecute("UPDATE summary_table SET racer_id = '" + newracer + "' WHERE racer_id == '" + oldracer + "'  AND event_id == '" + eventid + "'")		  		  if G_Database.Error = true then		    MsgBox "Error updating summary_table records"		    G_Database.Rollback		    return status		  end if		  		  G_Database.Commit		  status = true		  return status		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub RecalculateRaceValues(rdatabase as realSQLDatabase, eventid as string)		  //This is used to recalculate the race values such as laps, best lap, rank etc. after a lap has been merged, deleted or a racer has been deleted		  //This is a private method that will be called from the merge or split methods		  dim racer_ids(-1) as string		  dim maxlaps(-1) as integer		  dim highestlapnum as integer		  dim lagtime as double		  dim rs as RecordSet		  dim total as double		  dim query as string		  dim temprankmethod as string		  		  		  		  		  //Create an array of cars and individual cars, we will add the individual cars to the array as we build it		  dim racers(-1) as raceCar		  dim tempcar as new raceCar		  		  racer_ids = getRacerIDs(eventid, rdatabase)		  lagtime = 0		  		  //Find out how the race was ranked		  rs = rdatabase.SQLSelect("SELECT * FROM race_table WHERE event_id=='"+eventid+"'")		  temprankmethod = rs.Field("rankmethod").StringValue		  		  //We only want to retrieve the lap times and lap numbers for the event.  The lag, average, best lap, and other summary information will be recalculated		  for i as integer = 0 to UBound(racer_ids)		    rs = rdatabase.SQLSelect("SELECT DISTINCT lap_number,time_at_lap,lap_time FROM laps_table WHERE racer_id=='"+racer_ids(i)+"' AND event_id=='"+eventid+"'")		    if rs<>nil then		      tempCar = new raceCar		      tempcar.best_lap = 999		      tempcar.best_time = 999		      tempcar.lapsLeading = 0		      tempcar.RacerID = val(racer_ids(i))		      tempcar.theName = GetRacerName(racer_ids(i))		      while not rs.EOF		        tempCar.lapCounts.Append rs.Field("lap_number").DoubleValue		        tempcar.lapCount = rs.Field("lap_number").IntegerValue		        tempCar.lapTimes.Append rs.Field("lap_time").DoubleValue		        tempCar.timeAtLap.Append rs.Field("time_at_lap").DoubleValue		        tempcar.timeSinceLastCheck = rs.Field("lap_time").DoubleValue		        //Check to see if we have a new best lap for racer		        if rs.Field("time_at_lap").DoubleValue < tempcar.best_time then		          tempcar.best_time = rs.Field("time_at_lap").DoubleValue		          tempcar.best_lap = rs.Field("lap_number").DoubleValue		        end if		        		        rs.MoveNext		        		      wend		    else		      MsgBox "Error finding laps table information"		    end if		    		    racers.Append tempCar//appends the racer info		  next		  		  //find the largest number of laps and store it to highestlapnum		  for i as integer = 0 to UBound(racer_ids)		    maxlaps.Append ubound(racers(i).lapCounts) + 1		  next		  maxlaps.Sort		  highestlapnum = maxlaps.Pop		  		  		  //recalculate lag times and put laps back into database		  //Run the calculation for each each lap for each racer		  for i as integer = 0 to highestlapnum - 1		    //check each lap of the current car to determine lag time		    for j as integer = 0 to ubound(racers)		      dim timeatlaparray(-1) as double		      dim rankatlaparray(-1) as integer		      		      //build an array of the times for this particular lap		      for k as integer = 0 to UBound(racers)		        //make sure this car has the lap in question		        if racers(k).lapCount > i  then		          //We have this many laps so calculate lag		          timeatlaparray.Append racers(k).lapTimes(i)		          rankatlaparray.Append k		        end		      next		      		      //Sort the array so we can find the lowest time to use as the lag comparison		      timeatlaparray.SortWith(rankatlaparray)		      		      //make sure this car has this lap number to calculate the lag		      //also recalculate average while we are at it		      if racers(J).lapcount > i then		        lagtime = racers(j).lapTimes(i) - timeatlaparray(0)		        racers(j).lagTimes.Append  lagtime		        		        //If lag is 0 then this racer is in the lead, give them an additional lead lap		        if lagtime = 0 then		          racers(j).lapsLeading = racers(j).lapsLeading + 1		        end if		        total = 0		        for l as integer=0 to UBound(racers(j).timeAtLap)		          total=total+racers(j).timeAtLap(l)		        next		        racers(j).average = total/(i+1)		        		        //Figure out what rank this racer is at this lap		        for m as integer=0 to UBound(rankatlaparray)		          if rankatlaparray(m) = j then		            racers(j).lapPlaces.append(m+1)		          end if		          		        next		        		      end if		      		    next		  next		  		  //Now we have to calculate rank		  dim rankArray(-1) as Integer		  		  for i as integer = 0 to UBound(racers)		    rankArray.Append i		  next		  		  		  //now we got to re-arange the rank array based on info from the ActiveIndexes		  dim temp as Integer		  dim time1,time2 as Double		  if rankmethod = "Best Lap" then		    //Rank by best lap		    for i as integer =0 to UBound(rankArray)		      if i<>UBound(rankArray) then//As long as were not at the end~		        if racers(rankArray(i+1)).best_time<racers(rankArray(i)).best_time then		          temp = rankArray(i)		          rankArray(i) = rankArray(i+1)		          rankArray(i+1) = temp		          i=-1//reset it so it checks through the loop again incase one was greater		        elseif racers(rankArray(i+1)).best_time=racers(rankArray(i)).best_time then//if there is a tie in laps then we can play them by there current time on the lap		          time1= racers(rankArray(i+1)).best_lap		          time2= racers(rankArray(i)).best_lap		          if time1>time2 then//then the person ahead has the better time so we'll swap positions		            temp = rankArray(i)		            rankArray(i) = rankArray(i+1)		            rankArray(i+1) = temp		            i=-1//reset it so it checks through the loop again incase one was greater		          end if		        end if		      end if		    next		    		  else		    //Rank by number of laps		    for i as integer =0 to UBound(rankArray)		      if i<>UBound(rankArray) then//As long as were not at the end~		        if racers(rankArray(i+1)).lapCount>racers(rankArray(i)).lapCount then		          temp = rankArray(i)		          rankArray(i) = rankArray(i+1)		          rankArray(i+1) = temp		          i=-1//reset it so it checks through the loop again incase one was greater		        elseif racers(rankArray(i+1)).lapCount=racers(rankArray(i)).lapCount then//if there is a tie in laps then we can play them by there current time on the lap		          time1=racers(rankArray(i+1)).timeSinceLastCheck		          time2=racers(rankArray(i)).timeSinceLastCheck		          if time1<time2 then//then the person ahead has the better time so we'll swap positions		            temp = rankArray(i)		            rankArray(i) = rankArray(i+1)		            rankArray(i+1) = temp		            i=-1//reset it so it checks through the loop again incase one was greater		          end if		        end if		      end if		    next		  end if		  		  //Now that the array is sorted by rank update what place people are in		  for i as integer =0 to UBound(rankArray)		    racers(rankArray(i)).currentPlace=i+1		  next		  		  		  		  		  //After all this work we now need to delete the old data from the database and insert the new data		  		  //Now we drop that racers laps from the database		  rdatabase.SQLExecute("DELETE FROM laps_table WHERE event_id=='"+eventid+"'")		  //Only commit after the full transaction is executed		  //rdatabase.Commit		  if rdatabase.Error = True then		    MsgBox "Error deleting from laps_table"		    rdatabase.Rollback		    return		  end if		  		  //Now we drop that race summary from the database		  rdatabase.SQLExecute("DELETE FROM summary_table WHERE event_id=='"+eventid+"'")		  //Only commit after the full transaction is executed		  //rdatabase.Commit		  if rdatabase.Error = True then		    MsgBox "Error deleting from laps_table"		    rdatabase.Rollback		    return		  end if		  		  		  		  		  //Summary Table Information to be added~		  dim rank as string		  dim avg as string		  dim best_time as string		  dim best_lap as string		  dim laps_leading as string		  dim final_time as string		  dim total_laps as string		  		  if UBound(racers) > -1 then		    for i as integer = 0 to UBound(racers)		      //Check racer to make sure they actually did something		      if ubound(racers(i).lapTimes) >= 0 then		        rank = str(racers(i).currentplace)		        //Round the average to 3 decimal places		        avg = format(racers(i).average, "0.000")		        avg = str(CDbl(avg))		        best_time = str(racers(i).best_time)		        best_lap = str(racers(i).best_Lap)//might be problem in query?		        laps_leading = str(racers(i).lapsLeading)		        total_laps = str(racers(i).lapCount)		        final_time = str(racers(i).timeSinceLastCheck)		        query = query + _		        "INSERT INTO summary_table(racer_id,event_id,rank,average_time,best_time,best_lap,laps_leading,total_laps,final_time) VALUES ('"+str(racers(i).RacerID)+"','"+eventid+"','"+rank+"','"+avg+"','"+best_time+"','"+best_lap+"','"+laps_leading+"','"+total_laps+"','"+final_time+"');"		      else		        //the racer did nothing so we need to delete them out of the summary table and the linking table		        query = query + "DELETE FROM summary_table WHERE racer_id = " + str(racers(i).RacerID) + " AND event_id = " + eventid + ";"		        //query = query + "DELETE FROM race_racer_table WHERE racer_id = " + str(racers(i).RacerID) + " AND event_id = " + eventid + ";"		      end if		    next		    		    rdatabase.SQLExecute(query)		    		    		    if rdatabase.Error=true then		      MsgBox "Error inserting racers data to summary_table"+EndOfLine+EndOfLine+G_Database.ErrorMessage+EndOfLine+query		      rdatabase.Rollback		      return		    else		      //Only commit after the full transaction is executed		      //rdatabase.Commit()//save changes~		    end if		    		    //Laps Table Information to be added		    query=""//reset it since I'm using the same variable again		    		    //This check makes sure that at least 1 racer was added to the race		    		    for i as integer =0 to UBound(racers)		      //Check to make sure racer actually completed a lap, if not do not insert their record		      if ubound(racers(i).lapCounts) >= 0 then		        		        for k as integer = 0 to UBound(racers(i).lagTimes)//Lap Counts array will match the others, so no need for another inner loop.		          query=query+_		          "INSERT INTO laps_table(racer_id,event_id,lap_number,lap_time,lag_time,time_at_lap,lap_place) VALUES ('"+_		          str(racers(i).RacerID)+"','"+_		          eventid+"','"+_		          str(racers(i).lapCounts(k))+"','"+_		          str(racers(i).lapTimes(k))+"','"+_		          str(racers(i).lagTimes(k))+"','"+_		          str(racers(i).timeAtLap(k))+"','"+_		          str(racers(i).lapPlaces(k))+"');"		        next		        		      end if		    next		    		    		    //Check to make sure we have a query to run		    //This gets rid of the error that can occur if a race is ended that has no racers		    if query <> "" then		      rdatabase.SQLExecute(query)		      		      		      if rdatabase.Error=true then		        MsgBox "Error inserting racers data to laps_table"+EndOfLine+EndOfLine+G_Database.ErrorMessage+EndOfLine+query		        rdatabase.Rollback		      else		        rdatabase.Commit()//save changes~		      end if		    end if		    		  end if		  		  //In theory we have updated the race information		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub ResetBestLap(racerid as integer)		  //rest this racers best lap, used during a race		  		  for i as integer = 0 to UBound(G_Preferences.theRaceObject.racers)		    if G_Preferences.theRaceObject.racers(i).RacerID = racerid then		      G_Preferences.theRaceObject.racers(i).best_time = 999		      exit for i		    end if		  next		  		  for i as integer = 0 to UBound(G_Preferences.theRaceObject.activeRacers)		    if G_Preferences.theRaceObject.activeRacers(i).RacerID = racerid then		      G_Preferences.theRaceObject.activeRacers(i).best_time = 999		      exit for i		    end if		  next		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SaveProfile(database as realSQLDatabase, name as string)		  //Saves race settings to a profile		  dim success as boolean		  		  success = DeleteProfile(database,name)		  		  if success = true then		    		    success = CreateProfile(database,name)		    		    if success = true then		      dim tempWindow as new messageWindow		      tempWindow.message = t_saved		      tempWindow.timeLimit = 1		      		    else		      MsgBox "Save failed"		    end if		    		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function secondsToTime(seconds as double, secondsFormat as string) As string		  dim d as new date		  dim t as string		  dim i as integer		  dim h as double		  dim s as double		  		  d.totalseconds = seconds		  		  if secondsFormat = "0.000" then		    //Get thousandths value		    i = floor(seconds)		    h = (seconds - i) * 1000		    		    s = d.second + h/1000		    		    secondsFormat = "00.000"		  else		    // Get the hundreths value to add to strings		    i = floor(seconds)		    h = (seconds - i) * 100		    		    s = d.second + h/100		    		    secondsFormat = "00.00"		  end if		  		  select case d.TotalSeconds		    		  case is >= 86400		    //Time is a day or greater		    t  = format(d.Day-1, "##") + ":" + format(d.hour, "00") + ":" + format(d.minute, "00") + ":" + format(s, secondsFormat)		    		  case is >= 3600		    //Time is a hour or greater		    t  = format(d.hour, "##") + ":" + format(d.minute, "00") + ":" + format(s, secondsFormat)		    		  case is >= 60		    //Time is a minute or greater		    t  = format(d.minute, "##") + ":" + format(s, secondsFormat)		  else		    //Time is less than a minute		    if secondsFormat = "00.000" then		      t = format(s, "##.000")		    else		      t = format(s, "##.00")		    end if		  end select		  		  return t		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub SplitRacerLap(rdatabase as realSQLDatabase, eventid as string, racerid as string, lapnumber as integer)		  //This is used in the event that the lap counter missed a lap, this will split a lap into 2 even times		  //Split will add the new lap after the initial lap to be split		  		  //This method only updates the lap numbers and times in the database, all other values must be updated using the RecalculateRaceValues method		  		  dim rs as RecordSet		  		  //Get Lap information for that racer and store to the temp racer~		  rs = rdatabase.SQLSelect("SELECT DISTINCT lap_number,lap_time,time_at_lap FROM laps_table WHERE event_id=='"+eventid+"' AND racer_id=='"+racerid+"';")		  		  dim temp as new raceCar		  dim lap_number as integer		  dim lap1time as double		  dim lap1timeint as integer		  dim lap2time as double		  dim lap2timeint as integer		  dim timeatlap as integer		  		  		  while rs.EOF=false//read in the data to create the racer info~		    lap_number = rs.Field("lap_number").IntegerValue		    if lap_number<>0 then		      temp.lapTimes.Append rs.Field("lap_time").DoubleValue		      temp.timeAtLap.Append rs.Field("time_at_lap").DoubleValue		    end if		    rs.MoveNext		  wend		  		  if lapnumber > UBound(temp.laptimes) + 1 then		    //Not a valid lap, out of bounds		    MsgBox "Not a valid lap"		    //Return instead of doing anything		    Return		  end if		  		  //Make sure we do not have an extra 0		  if UBound(temp.lapTimes) > 0 then		    if temp.lapTimes(0) = 0 then		      temp.lapTimes.Remove(0)		      temp.timeAtLap.Remove(0)		    end if		  end if		  		  		  //Check to make sure there is more than 0 laps		  if temp.timeAtLap.Ubound < 0 then		    return		  end if		  		  		  //Check to see if they are trying to split the first lap or not		  if lapnumber = 1 then		    //They are trying to split the first lap		    //Multiply by 100 to help with rounding issues		    timeatlap = temp.timeatlap(lapnumber - 1) * 100		    		    lap1timeint = timeatlap / 2		    lap2timeint = timeatlap - lap1timeint		    //Divide by 100 to help with rounding issues		    lap1time = lap1timeint / 100		    lap2time = lap2timeint / 100		    //Update the lap information for lap 1 of the split		    temp.timeatlap(lapnumber - 1) = lap1time		    temp.laptimes(lapnumber - 1) = lap1time		    //Insert new information for lap 2 of the split		    temp.timeAtLap.Insert(lapnumber, lap2time)		    temp.lapTimes.Insert(lapnumber, (temp.laptimes(lapnumber - 1) + lap2time))		    		    		    		    		  else		    //We are after lap 1 so we are fine to go this way		    //Split the selected lap and insert the result after it		    timeatlap = temp.timeatlap(lapnumber - 1) * 100		    lap1timeint = timeatlap / 2		    lap2timeint = timeatlap - lap1timeint		    //Divide by 100 to get rid of rounding issues		    lap1time = lap1timeint / 100		    lap2time = lap2timeint / 100		    		    //Update the lap information for lap 1 of the split		    temp.timeatlap(lapnumber - 1) = lap1time		    temp.laptimes(lapnumber - 1) = temp.laptimes(lapnumber -2) + lap1time		    //Insert new information for lap 2 of the split		    temp.timeAtLap.Insert(lapnumber, lap2time)		    temp.lapTimes.Insert(lapnumber, temp.laptimes(lapnumber - 1) + lap2time)		  end if		  		  		  //Now we drop that racers laps from the database and add back the adjusted ones, lag will be calculated later		  rdatabase.SQLExecute("DELETE FROM laps_table WHERE racer_id=='"+racerid+"' AND event_id=='"+eventid+"'")		  //Only commit after the full transaction is executed		  //G_Database.Commit		  if rdatabase.Error = True then		    MsgBox "Error deleting from laps_table"		    rdatabase.Rollback		    return		  end if		  		  //Now insert the laps back into the laps table		  dim query as string		  dim k as integer		  dim j as integer		  j = 0		  		  //Laps Table Information to be added~		  query=""//reset it since I'm using the same variable again		  		  		  //FixMe, cheesy way of not inserting the 0 lap into the database, start k at 1 instead of 0		  for k=0 to UBound(temp.timeAtLap)//Lap Counts array will match the others, so no need for another inner loop.		    j = j + 1		    query=query+_		    "INSERT INTO laps_table(racer_id,event_id,lap_number,lap_time,time_at_lap) VALUES ('"+_		    racerid+"','"+_		    eventid+"','"+_		    str(j)+"','"+_		    str(temp.lapTimes(k))+"','"+_		    str(temp.timeAtLap(k))+"');"		  next		  		  //Check to make sure we have a query to run		  if query <> "" then		    rdatabase.SQLExecute(query)		    		    		    if rdatabase.Error=true then		      MsgBox "Error inserting racers data to laps_table"+EndOfLine+EndOfLine+G_Database.ErrorMessage+EndOfLine+query		      rdatabase.Rollback		    else		      rdatabase.Commit()//save changes~		    end if		  end if		  		  //Now that we have commited the new lap times it is time to recalculate all other values		  RecalculateRaceValues(rdatabase, eventid)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub StartRace(eventItemId as Integer = - 1)		  //This will be where the loop for the race will begin		  dim i as Integer		  dim amountActive as Integer		  dim activeIndexes(-1) as Integer = FindActiveRacerIndexes()		  dim pass as Boolean		  		  //Make sure we are not scanning for UID's still		  mainWindow.scanUIDTimer.Mode = 0		  mainWindow.M_SelectingRacers = false		  		  //Clear the serial buffer just in case		  Select Case G_Preferences.hardwareType		  Case "CoreSpeedway","CoreSpeedway i166"		    redim mainWindow.assembledHex(-1)		    mainWindow.Serial1.Flush		  Case "AMB20"		    mainWindow.SerialLapCounters1.Flush		  end select		  		  //Check to see if this is part of a managed event, this is so when it is over we can link the race to the event item for event management		  eventItem = eventItemId		  if eventItem <> -1 then		    //Part of an event		    managed = True		  else		    //Not part of an event		    managed = False		  end if		  		  		  //Always auto delete racers now that select racers screen is no longer available		  //Check to see if we need to clear out the previous racers		  		  		  for i = 0 to 49		    if G_Preferences.theRaceObject.slotsEnabled(i) = true then		      mainWindow.RemoveRacerSlot(i)		    end if		  next		  //end if		  		  		  //Reset the ended time, used for timeout calculations		  endedTime = 0		  		  redim activeRacers(-1)//to start it over incase this has already been initiated.		  ReDim activeUIDs(-1)		  for i=0 to UBound(racers)		    if racers(i).Active=true then		      activeRacers.Append racers(i)//this will add to the currently active racers in the 'race' right now.  At the end of a race this will be nil~		      activeUIDs.Append racers(i).UID		      amountActive=amountActive+1		    end if		  next		  		  //removed the check for active racers to allow starting a race with no one in it		  //if amountActive>0 then//must be at least 1 active racer to start a race.		  		  if G_Preferences.theRaceObject.RaceType <> "Free Play" then		    //Store this event to the database for when we want to review the results in the future~		    //Do not store anything to the database in free play mode		    pass = StoreEventToDatabase()		    if pass=true then		      if amountActive>0 then		        pass = StoreRacersToDatabase()//now check to store the racers to the database for the ID described		      end if		      if pass=False then		        MsgBox "Error storing racers to database! event worked though!"		      end if		    else		      MsgBox "Error storing the event to database!"		    end if		    		  else		    //We are in free play mode, we need to set pass to true so it can process without storing to the database		    pass = true		    		  end if		  		  if pass=true then//if the database was succesful in storing (I.E no unique name errors)		    mainWindow.DisableInRaceControls()		    		    for i=0 to UBound(activeIndexes)//M_Slot Defaulting, will clear any of the active racers past temp data from the round for updating~		      redim racers(activeIndexes(i)).lapCounts(-1)		      redim racers(activeIndexes(i)).lapTimes(-1)		      redim racers(activeIndexes(i)).lagTimes(-1)		      redim racers(activeIndexes(i)).timeAtLap(-1)		      ReDim racers(activeIndexes(i)).lapPlaces(-1)		      racers(activeIndexes(i)).Pace=0		      racers(activeIndexes(i)).best_time=999		      racers(activeIndexes(i)).lagTime=0		      racers(activeIndexes(i)).lapCount=0		      racers(activeIndexes(i)).lastLapTime=0		      racers(activeIndexes(i)).currentPlace=1		      racers(activeIndexes(i)).lapsLeading=0		      racers(activeIndexes(i)).firstPass=0		      		    next		    		    //Race Screen Defaulting...		    for i=0 to 49		      		      if mainWindow.emptyRacerImage <> Nil then		        mainWindow.RcCanvas(i).Backdrop=mainWindow.emptyRacerImage		      end if		      		      //fix hard reference to color		      mainWindow.RankText(i).Text = "1"		      mainWindow.RankText(i).TextColor = &cBABABA		      		      mainWindow.NameRankText(i).Text = "Empty"		      mainWindow.NameRankText(i).TextColor = &cBABABA		      		      mainWindow.LapsRankText(i).Text = "0"		      mainWindow.LapsRankText(i).TextColor = &cBABABA		      		      mainWindow.LapTimeText(i).Text = "0"		      mainWindow.LapTimeText(i).TextColor = &cBABABA		      //Remember to refresh the double buffer canvas control, the text control is not actually displayed		      //mainWindow.//DB_RS_TIME(i).Refresh		      		      mainWindow.lastLapRankText(i).Text = "0"		      mainWindow.lastLapRankText(i).TextColor = &cBABABA		      		      //Fixme lag calculation wrong		      //mainWindow.lagRankText(i).Text = "0"		      //mainWindow.lagRankText(i).TextColor = &cBABABA		      		      mainWindow.BestLapRankText(i).Text = "0"		      mainWindow.BestLapRankText(i).TextColor = &cBABABA		      		      mainWindow.PageRankText(i).Text="0"//pace, need to make name pace later		      mainWindow.PageRankText(i).TextColor = &cBABABA		    next		    mainWindow.timeRemainingText="0:00"		    		    mainWindow.PagePanel1.Value=4//make sure were looking at the right PagePanel section (Racer Screen)		    		    		    		    		    mainWindow.TimeHeaderText.Text=t_countdown + ": "		    		    if G_Preferences.theRaceObject.countdowntype = "F1" then		      mainWindow.timeRemainingText="0"		    else		      mainWindow.timeRemainingText=cstr(G_Preferences.theRaceObject.countDownTime)		    end if		    mainWindow.M_CountDownTime = G_Preferences.theRaceObject.countDownTime		    mainWindow.countDownTimer.Mode=2		    mainWindow.countDownTimerActive=true//so we know it's on for other operations		    G_Preferences.theRaceObject.timeRemaining=G_Preferences.theRaceObject.timeLimit		    mainWindow.AnimateRaceScreen()//should show them all in position #1, and 0 on all positions (because old positions should be erased now)		  end if		  		  //Refresh the double buffer class used for the time remaining text		  mainWindow.DB_TimeRemaining.Refresh		  		  //got rid of the logic that prevented starting a race with no racers		  //else		  //MsgBox "You must add some racers before you can start a race!"		  //mainWindow.PagePanel1.Value=2		  //end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function StoreEventToDatabase() As boolean		  dim query as string		  dim d as new date		  dim rs as RecordSet		  		  query = "INSERT INTO race_table(event_name,race_type,num_laps,time_limit,min_lap_time,count_down_time,round_type,date_added, rankmethod) "+_		  "VALUES ('"+eventName+"','"+RaceType+"','"+str(numLaps)+"','"+str(timeLimit)+"','"+str(minLapTime)+"','"+_		  str(countDownTime)+"','"+roundType+"','"+d.SQLDateTime+"','"+rankMethod+"');"		  		  G_Database.SQLExecute(query)		  		  if not G_Database.Error then		    G_Database.Commit//save the changes		    rs = G_Database.SQLSelect("SELECT * FROM race_table WHERE event_name=='"+eventName+"';")		    if rs<>nil then		      currentEventID = rs.Field("event_id").IntegerValue//we now have the event_id for reference later		      //MsgBox "CurrenttEventID="+str(currentEventID)		      //MsgBox "Eventname=" + rs.Field("event_name").StringValue		      return true		    else		      MsgBox "Error getting the event_id"		      return false		    end if		  else		    if instrb(G_Database.ErrorMessage,"unique")>0 then//if you get the column is unique error message then...		      MsgBox t_youneeddifferenteventname		      //MsgBox "Error in the query: "+query+EndOfLine+EndOfLine+G_Database.ErrorMessage		    else		      MsgBox "Error in the query: "+query+EndOfLine+EndOfLine+G_Database.ErrorMessage		    end if		    return False		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function StoreRacersToDatabase() As boolean		  dim rs as RecordSet		  dim query as string		  dim activeRacerIndexes(-1) as Integer = FindActiveRacerIndexes()		  dim racer_id as string		  dim racer_ids(-1) as string		  dim pass as Boolean		  		  query = "SELECT * FROM racer_table WHERE "		  for i as Integer = 0 to UBound(activeRacerIndexes)		    if i=UBound(activeRacerIndexes) then		      query=query+"uid=='"+racers(activeRacerIndexes(i)).UID+"' AND enabled == 1"		    else		      query=query+"uid=='"+racers(activeRacerIndexes(i)).UID+"'"+" OR "		    end if		  next		  		  //First return the results of all the racers based on UID, they will be the race ID's we use to tag with the event_ID that we now know.		  rs = G_Database.SQLSelect(query)		  		  if rs<>nil then		    while not rs.EOF//Of the racers,		      racer_id = rs.Field("racer_id").StringValue		      for i as Integer=0 to UBound(activeRacerIndexes)//find out if uid of the field = what were on if so, set it's racer_id accordingly.		        if rs.Field("uid").StringValue=racers(activeRacerIndexes(i)).UID then		          racers(activeRacerIndexes(i)).RacerID=cdbl(racer_id)		        end if		      next		      racer_ids.Append racer_id		      rs.MoveNext		    wend		    pass=true		  else		    MsgBox "Error, no record set returned."+EndOfLine+EndOfLine+query+EndOfLine+EndOfLine+G_Database.ErrorMessage		  end if		  		  if pass=true then//if so far so good then...		    return pass		  else		    return false		  end if		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function StoreRacerToDatabase(UID as string) As boolean		  //If you need to update just a single racer and not all of them use this function, just pass it the UID of the racer you want to update to the database.		  		  dim rs as RecordSet		  dim query as string		  dim activeRacerIndexes(-1) as Integer = FindActiveRacerIndexes()		  dim racer_id as string		  dim pass as Boolean		  		  query = "SELECT * FROM racer_table WHERE UID=='"+UID+"' AND enabled == 1"		  		  //First return the results of all the racers based on UID, they will be the race ID's we use to tag with the event_ID that we now know.		  rs = G_Database.SQLSelect(query)		  		  if rs<>nil then		    racer_id = rs.Field("racer_id").StringValue		    for i as Integer=0 to UBound(activeRacerIndexes)//assumes the racer will be active in here.		      if racers(activeRacerIndexes(i)).UID=UID then		        racers(activeRacerIndexes(i)).RacerID=cdbl(racer_id)		        exit//we found what we want!		      end if		    next		    pass=true		  else		    MsgBox "Error, no record set returned while trying to get individual racer_id."+EndOfLine+EndOfLine+query+EndOfLine+EndOfLine+G_Database.ErrorMessage		  end if		  		  if pass=true then//if so far so good then...		    return pass		  else		    return false//no pass, means the previous attempt did not work		  end if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function ValueInArray(theArray() as integer, value as integer) As boolean		  dim i as Integer		  		  for i=0 to UBound(theArray)		    if Value=theArray(i) then		      return true		    end if		  next		  return false		End Function	#tag EndMethod	#tag Note, Name = LICENSE		Copyright 2008 Jeremy Auten				This file is part of Flip Side Racing Software.				Flip Side Racing Software is free software: you can redistribute it and/or modify		it under the terms of the GNU General Public License as published by		the Free Software Foundation, either version 3 of the License, or		(at your option) any later version.				Flip Side Racing Software is distributed in the hope that it will be useful,		but WITHOUT ANY WARRANTY; without even the implied warranty of		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		GNU General Public License for more details.				You should have received a copy of the GNU General Public License		along with Flip Side Racing Software.  If not, see <http://www.gnu.org/licenses/>.	#tag EndNote	#tag Note, Name = Requirements		For this to work properly there needs to be a table in the database called raceprofile_table				Its creation looks like this				CREATE TABLE raceprofile_table (id INTEGER PRIMARY KEY,name VARCHAR,racetype VARCHAR, numberoflaps INTEGER, timelimit FLOAT, minlaptime FLOAT, countdown INTEGER, roundtype VARCHAR, 		timeout INTEGER, lapindication VARCHAR, enablerankannouncement BOOLEAN, rankinterval INTEGER, autodeleteracers BOOLEAN, UNIQUE(name))	#tag EndNote	#tag Property, Flags = &h0		#tag Note			//so you can find the racers that are currently active at any time by getting access to this array~			//This is used for the animateStatisticsScreen Function.		#tag EndNote		activeRacers(-1) As racecar	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			//This information is duplicated from the activeRacers			//It is used for a quick reference of who is actually in a race		#tag EndNote		activeUIDs(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		bestlapannouncement As String = "Personal"	#tag EndProperty	#tag Property, Flags = &h0		countDownTime As Integer	#tag EndProperty	#tag Property, Flags = &h0		countdowntype As String = "Standard"	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			//This is the ID refering to the  racer_table ID, so we know what Event_ID to write.		#tag EndNote		currentEventID As Integer	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			This is the time that a race is ended.  Used for timeout calculations		#tag EndNote		endedTime As Double	#tag EndProperty	#tag Property, Flags = &h0		endingCountDown As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		endinghorn As Boolean = false	#tag EndProperty	#tag Property, Flags = &h0		eventItem As Integer = -1	#tag EndProperty	#tag Property, Flags = &h0		eventName As string	#tag EndProperty	#tag Property, Flags = &h0		lapIndication As string = "Beep"	#tag EndProperty	#tag Property, Flags = &h0		managed As Boolean = False	#tag EndProperty	#tag Property, Flags = &h0		minLapTime As double	#tag EndProperty	#tag Property, Flags = &h0		numLaps As Integer	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			//all racers that are currently known are stored here~		#tag EndNote		racers(-1) As racecar	#tag EndProperty	#tag Property, Flags = &h0		RaceType As string = "Timed"	#tag EndProperty	#tag Property, Flags = &h0		rankchangeannouncement As String = "Lead Change"	#tag EndProperty	#tag Property, Flags = &h0		rankMethod As String = "Total Laps"	#tag EndProperty	#tag Property, Flags = &h0		roundType As string = "Practice"	#tag EndProperty	#tag Property, Flags = &h0		slotsEnabled(49) As Boolean = false	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Used to determine the state of the race.  There are 3 states, stopped, started and paused.		#tag EndNote		state As String = "stopped"	#tag EndProperty	#tag Property, Flags = &h0		tempTimeElapsed As double	#tag EndProperty	#tag Property, Flags = &h0		tempTimeLimit As double	#tag EndProperty	#tag Property, Flags = &h0		timeElapsed As double	#tag EndProperty	#tag Property, Flags = &h0		timeLimit As double	#tag EndProperty	#tag Property, Flags = &h0		timeOut As Integer = 30	#tag EndProperty	#tag Property, Flags = &h0		timeRemaining As double	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="bestlapannouncement"			Group="Behavior"			InitialValue="Personal"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="countDownTime"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="countdowntype"			Group="Behavior"			InitialValue="Standard"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="currentEventID"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="endedTime"			Group="Behavior"			InitialValue="0"			Type="Double"		#tag EndViewProperty		#tag ViewProperty			Name="endingCountDown"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="endinghorn"			Group="Behavior"			InitialValue="false"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="eventItem"			Group="Behavior"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="eventName"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="lapIndication"			Group="Behavior"			InitialValue="Beep"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="managed"			Group="Behavior"			InitialValue="False"			Type="Boolean"		#tag EndViewProperty		#tag ViewProperty			Name="minLapTime"			Visible=true			Group="Behavior"			InitialValue="0"			Type="double"			EditorType="Enum"			#tag EnumValues				"5 - "			#tag EndEnumValues		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="numLaps"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="RaceType"			Group="Behavior"			InitialValue="Timed"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="rankchangeannouncement"			Group="Behavior"			InitialValue="Lead Change"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="rankMethod"			Group="Behavior"			InitialValue="Total Laps"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="roundType"			Group="Behavior"			InitialValue="Practice"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="state"			Group="Behavior"			InitialValue="stopped"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="tempTimeElapsed"			Group="Behavior"			InitialValue="0"			Type="double"		#tag EndViewProperty		#tag ViewProperty			Name="tempTimeLimit"			Group="Behavior"			InitialValue="0"			Type="double"		#tag EndViewProperty		#tag ViewProperty			Name="timeElapsed"			Group="Behavior"			InitialValue="0"			Type="double"		#tag EndViewProperty		#tag ViewProperty			Name="timeLimit"			Group="Behavior"			InitialValue="0"			Type="double"		#tag EndViewProperty		#tag ViewProperty			Name="timeOut"			Group="Behavior"			InitialValue="30"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="timeRemaining"			Group="Behavior"			InitialValue="0"			Type="double"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass