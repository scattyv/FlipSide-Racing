#tag ClassProtected Class Preferences	#tag Method, Flags = &h0		Sub Constructor()		  //When this is first created it needs to read in the information.		  		  theRaceObject = new raceObject//make sure to instantiate this first before reading preferences~		  		  speechText = new Dictionary		  		  defaults = new Dictionary		  		  cache = new Dictionary		  		  //Load any defaults and then check config files		  loadDefaults		  		  upgradePreferences()		  		  readPreferences()//store the raceObject and some other properties		  		  //Load the language file settings		  readSpeechText		  		  //Load the crystals file		  readCrystals		  		  readRaceParts()		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function createColor(c as color) As string		  dim red,blue,green as string		  		  red = str(c.Red)		  blue = str(c.Blue)		  green = str(c.Green)		  		  return red+","+green+","+blue		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function getColor(item as string) As color		  dim red,blue,green as Integer		  dim c as Color		  		  red = val(nthfieldb(item,",",1))		  blue = val(nthfieldb(item,",",2))		  green = val(nthfieldb(item,",",3))		  c = rgb(red,blue,green)		  		  return c		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub loadDefaults()		  //Load any default preferences here		  		  //Speech text defaults in case a language file is not present.  American English is the default.		  		  speechText.Value("language_name") = "American English"		  speechText.Value("seconds") = s_seconds		  speechText.Value("hours") = s_hours		  speechText.Value("hour") = s_hour		  speechText.Value("minutes") = s_minutes		  speechText.Value("countdownone") = s_countdownone		  speechText.Value("countdowntwo") = s_countdowntwo		  speechText.Value("countdownthree") = s_countdownthree		  speechText.Value("countdownfour") = s_countdownfour		  speechText.Value("countdownfive") = s_countdownfive		  speechText.Value("bestlap") = s_sbestlap		  speechText.Value("fastestlap") = s_fastestlap		  speechText.Value("takesthelead") = s_takesthelead		  speechText.Value("timelimitreached") = s_timelimitreachedcompletelap		  speechText.Value("laplimitreached") = s_laplimitreachedcompletelap		  speechText.Value("finished") = s_finished		  speechText.Value("racecomplete") = s_racecomplete		  speechText.Value("secondsremaining") = s_secondsremaining		  speechText.Value("minuteremaining") = s_minuteremaining		  speechText.Value("minutesremaining") = s_minutesremaining		  speechText.Value("hourremaining") = s_hourremaining		  speechText.Value("hourandremaining") = s_hourandremaining		  speechText.Value("hoursremaining") = s_hoursremaining		  speechText.Value("hoursandremaining") = s_hoursand		  speechText.Value("in") = s_in		  speechText.Value("currentlyin") = s_currentlyin		  speechText.Value("with") = s_with		  speechText.Value("laps") = s_laps		  speechText.Value("followedby") = s_followedby		  speechText.Value("timedout") = s_timedout		  speechText.Value("preparetorace") = s_preparerace		  speechText.Value("onpacefor") = s_onpacefor		  speechText.Value("lapsremaining") = s_lapsremaining		  speechText.Value("lastlap") = s_lastlap		  speechText.Value("takes") = s_takes		  speechText.Value("first") = s_first		  speechText.Value("second") = s_second		  speechText.Value("third") = s_third		  speechText.Value("place") = s_place		  //Frequency defaults		  crystals.Append ""		  		  //Generic defauts		  defaults.Value("preferenceVersion") = "0"		  defaults.Value("clubName") = t_yourclubname		  defaults.Value("windowTop") = "0"		  defaults.Value("windowLeft") = "0"		  defaults.Value("windowHeight") = "746"		  defaults.Value("windowWidth") = "1024"		  defaults.Value("windowMaximize") = "TRUE"		  defaults.Value("slotColors0") = "121,255,195"		  defaults.Value("slotColors1") = "252,0,255"		  defaults.Value("slotColors2") = "0,255,255"		  defaults.Value("slotColors3") = "255,6,0"		  defaults.Value("slotColors4") = "255,127,0"		  defaults.Value("slotColors5") = "35,255,0"		  defaults.Value("slotColors6") = "132,133,22"		  defaults.Value("slotColors7") = "0,0,255"		  defaults.Value("slotColors8") = "184,184,184"		  defaults.Value("slotColors9") = "184,184,184"		  defaults.Value("slotColors10") = "184,184,184"		  defaults.Value("slotColors11") = "184,184,184"		  defaults.Value("slotColors12") = "184,184,184"		  defaults.Value("slotColors13") = "184,184,184"		  defaults.Value("slotColors14") = "184,184,184"		  defaults.Value("slotColors15") = "184,184,184"		  defaults.Value("slotColors16") = "184,184,184"		  defaults.Value("slotColors17") = "184,184,184"		  defaults.Value("slotColors18") = "184,184,184"		  defaults.Value("slotColors19") = "184,184,184"		  defaults.Value("slotColors20") = "184,184,184"		  defaults.Value("slotColors21") = "184,184,184"		  defaults.Value("slotColors22") = "184,184,184"		  defaults.Value("slotColors23") = "184,184,184"		  defaults.Value("slotColors24") = "184,184,184"		  defaults.Value("slotColors25") = "184,184,184"		  defaults.Value("slotColors26") = "184,184,184"		  defaults.Value("slotColors27") = "184,184,184"		  defaults.Value("slotColors28") = "184,184,184"		  defaults.Value("slotColors29") = "184,184,184"		  defaults.Value("slotColors30") = "184,184,184"		  defaults.Value("slotColors31") = "184,184,184"		  defaults.Value("slotColors32") = "184,184,184"		  defaults.Value("slotColors33") = "184,184,184"		  defaults.Value("slotColors34") = "184,184,184"		  defaults.Value("slotColors35") = "184,184,184"		  defaults.Value("slotColors36") = "184,184,184"		  defaults.Value("slotColors37") = "184,184,184"		  defaults.Value("slotColors38") = "184,184,184"		  defaults.Value("slotColors39") = "184,184,184"		  defaults.Value("slotColors40") = "184,184,184"		  defaults.Value("slotColors41") = "184,184,184"		  defaults.Value("slotColors42") = "184,184,184"		  defaults.Value("slotColors43") = "184,184,184"		  defaults.Value("slotColors44") = "184,184,184"		  defaults.Value("slotColors45") = "184,184,184"		  defaults.Value("slotColors46") = "184,184,184"		  defaults.Value("slotColors47") = "184,184,184"		  defaults.Value("slotColors48") = "184,184,184"		  defaults.Value("slotColors49") = "184,184,184"		  		  defaults.Value("raceType") = "Lap"		  defaults.Value("rankMethod") = "Total Laps"		  defaults.Value("numLaps") = "5"		  defaults.Value("timeLimit") = "2"		  defaults.Value("minLapTime") = "4.1"		  defaults.Value("countDownTime") = "10"		  defaults.Value("endCountDownTime") = "0"		  defaults.Value("timeOut") = "15"		  defaults.Value("roundType") = "Practice"		  defaults.Value("raceProfile") = "none"		  defaults.Value("lapIndication") = "Beep"		  defaults.Value("rankchangeannouncement") = "Lead Change"		  defaults.Value("bestlapannouncement") = "Personal"		  defaults.Value("countdowntype") = "Standard"		  defaults.Value("endinghorn") = "FALSE"		  defaults.Value("autoNameEvent") = "TRUE"		  defaults.Value("useAudio") = "TRUE"		  defaults.Value("rankAnnounce") = "FALSE"		  defaults.Value("staggeredStart") = "FALSE"		  defaults.Value("disableLiveGraphing") = "FALSE"		  defaults.Value("checkForUpdates") = "TRUE"		  defaults.Value("rankAnnInterval") = "4"		  defaults.Value("hardwareType") = "CoreSpeedway"		  defaults.Value("comPort") = "none"		  defaults.Value("secondaryComPort") = "none"		  defaults.Value("relayPort") = "none"		  defaults.Value("clubLogo") = "exampleLogo.jpg"		  defaults.Value("maxRacers") = "50"		  defaults.Value("rowSpacing") = "13"		  defaults.Value("closePrompt") = "When Racing"		  defaults.Value("languageFile") = "language.xml"		  defaults.Value("themeName") = "Flip Side"		  defaults.Value("emailPort") = "25"		  defaults.Value("emailRaceReports") = "0"		  defaults.Value("emailRecipients") = "0"		  defaults.Value("lapTimeSetting") = "0"		  defaults.Value("editRacersChassis") = "*"		  defaults.Value("editRacersClass") = "*"		  defaults.Value("editRacersCrystal") = "*"		  defaults.Value("editRacersEmail") = "*"		  defaults.Value("editRacersMake") = "*"		  defaults.Value("editRacersModel") = "*"		  defaults.Value("editRacersMotor") = "*"		  defaults.Value("editRacersScale") = "*"		  defaults.Value("emailEncrypt") = "FALSE"		  defaults.Value("rankAnnoucements") = "FALSE"		  defaults.Value("maxRankAnnounced") = "8"		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function read(name as String, type as boolean) As Boolean		  dim tempout as string		  dim output as boolean		  		  tempout = readRaw(name)		  output = False		  		  if tempout = "TRUE" then		    		    output = True		    		  end if		  		  return output		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function read(name as String, type as color) As Color		  dim tempout as String		  dim output as Color		  		  output = &cB8B8B8		  		  tempout = readRaw(name)		  		  if tempout <> "" then		    output = GM_StringToColor(tempout)		  end if		  		  return output		  		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function read(name as String, type as double) As Double		  dim output as Double		  dim tempout as string		  		  tempout = readRaw(name)		  output = 0		  		  if tempout <> "" then		    		    if IsNumeric(tempout) then		      		      output = CDbl(tempout)		      		    end if		    		  end if		  		  return output		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function read(name as String, type as string) As String		  dim output as string		  		  output = readRaw(name)		  		  return output		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function readB(name as String) As Boolean		  dim output as boolean		  dim temp as boolean		  		  output = read(name,temp)		  		  return output		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function readC(name as String) As Color		  dim output as color		  dim temp as color		  		  output = read(name,temp)		  		  return output		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub readCrystals()		  //Used to read the frequencies from the crystals.xml file.  This information is used to populate the popup menu in the edit racer screen for selecting which crystal a racer is using		  dim fileLanguage as FolderItem = GetFolderItem("crystals.xml")		  dim xdoc as XmlDocument		  dim root as XmlNode		  dim i,count as Integer		  dim item as string		  		  if fileLanguage <> nil then		    		    xdoc = New XmlDocument(fileLanguage)//parses all the information required into the xml object		    		    count = xdoc.DocumentElement.ChildCount		    		    for i=0 to count-1		      root = xdoc.DocumentElement.Child(i)		      		      item = root.FirstChild.Value		      		      //Check the actual values from the file here		      select case root.Name		        		      case "AMfreq"		        crystals.Append "AM " + item		        		      case "FMfreq"		        crystals.Append "FM " + item		        		      case "other"		        crystals.append item		        		      end select		      		      		    next		  else		    return		    		  end if		  		Exception e as RuntimeException		  MsgBox "Exception error occured while reading the crystal file, using default values instead"		  crystals.Append "none"		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function readD(name as String) As Double		  dim output as double		  dim temp as double		  		  output = read(name,temp)		  		  return output		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function readI(name as String) As integer		  dim output as integer		  dim temp as double		  		  output = read(name,temp)		  		  return output		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub readPreferences()		  //Do any processing needed for preferences		  		  //Read club logo		  dim tClubLogo as string		  tClubLogo = readS("clubLogo")		  		  if tClubLogo <> "" then		    dim f as FolderItem		    f = GetFolderItem("club_logo").Child(tClubLogo)		    if f<>nil and f.Exists=true then		      clubLogoPath=tClubLogo		      clubLogo=Picture.Open(f)//will set the picture accordingly~		    else		      clubLogoPath=tClubLogo//just in case so if there is an error it doesn't bring the program down with it~		      MsgBox "Could not locate the club logo image"		    end if		    		  end if		  		  //Set lap timing format		  select case readS("lapTimeSetting")		    		  case "0"		    //Set to automatic, we determine the format by the hardware type		    dim tempSerial as new SerialLapCounters		    tempSerial.hardwaretype = readS("hardwareType")		    lapTimeFormat = tempSerial.lapTimeFormat		    		  case "1"		    lapTimeFormat = "0.00"		  case "2"		    lapTimeFormat = "0.000"		  else		    lapTimeFormat = "0.00"		  end select		  		  //Read some preferences into variables so we do not have repeated database queries during race		  hardwareType = readS("hardwareType")		  rankAnninterval = readI("rankAnnInterval")		  rankAnnoucements = readB("rankAnnoucements")		  relayPort = readS("relayPort")		  useAudio = readB("useAudio")		  theRaceObject.RaceType = readS("raceType")		  theRaceObject.numLaps = readI("numLaps")		  theRaceObject.timeLimit = readD("timeLimit")		  theRaceObject.minLapTime = readD("minLapTime")		  theRaceObject.roundType =readS("roundType")		  theRaceObject.countDownTime = readI("countDownTime")		  theRaceObject.endingCountDown = readI("endCountDownTime")		  theRaceObject.timeOut = readI("timeOut")		  theRaceObject.countdowntype = readS("countdowntype")		  theRaceObject.endinghorn = readB("endinghorn")		  theRaceObject.lapIndication = readS("lapIndication")		  theRaceObject.rankMethod = readS("rankMethod")		  theRaceObject.rankchangeannouncement = readS("rankchangeannouncement")		  theRaceObject.bestlapannouncement = readS("bestlapannouncement")		  rowSpacing = readI("rowSpacing")		  		  //read in the slot colors		  for i as integer = 0 to 49		    slotColors(i) = readC("slotColors" + str(i))		  next		  		  //For translation purposes change Your Club Name to local language		  if language <> "English (Default)" and language <> "English" and language <> "English (UK)" then		    if readS("clubName") = "Your Club Name" then		      write("clubName", t_yourclubname)		    end if		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub readRaceParts()		  dim fileRaceParts as FolderItem = GetFolderItem("raceparts.xml")		  dim xdoc as XmlDocument		  dim root as XmlNode		  dim i,count as Integer		  dim item as string		  		  if fileRaceParts<>nil then		    xdoc = new XmlDocument(fileRaceParts)		    count = xdoc.DocumentElement.ChildCount		    		    for i=0 to Count-1		      root = xdoc.DocumentElement.Child(i)		      		      if root.FirstChild <> Nil then		        item = root.FirstChild.Value		      else		        continue		      end if		      		      select case root.Name		      case "chassis"		        chassisParts.Append item		      case "scale"		        scaleParts.Append item		      case "class"		        classParts.Append item		      case "make"		        makeParts.Append item		      case "model"		        modelParts.Append item		      case "motor"		        motorParts.Append item		      end Select		    next		    		    		  else		    MsgBox "Error Occured, raceparts.xml File Could Not Be Located"		  end if		  		Exception e as RuntimeException		  MsgBox "Exception error occured while reading the race parts file, using default values instead"		  chassisParts.Append ""		  scaleParts.Append ""		  classParts.Append ""		  makeParts.Append ""		  modelParts.Append ""		  motorParts.Append ""		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function readRaw(name as String) As String		  dim output as string		  dim rs as RecordSet		  		  output = ""		  		  //Check cache first for a value		  if cache.HasKey(name) then		    output = cache.Value(name)		  end if		  		  //If no value is found in cache then we check the database		  if output = "" then		    rs =  G_Database.SQLSelect("SELECT * FROM preferences_table WHERE name='" + name + "'")		    		    if rs <> Nil then		      if rs.RecordCount > 0 then		        		        output = rs.Field("value").StringValue		        //Write this to the cache so we do not need to look it up repeatably		        cache.Value(name)=output		        		      end if		    end if		  end if		  		  //If no value is found then we need to check for a default and use that if it exists		  if output = "" then		    if defaults.HasKey(name) then		      output = defaults.Value(name)		      //Write this to the cache so we do not need to look it up repeatably		      cache.Value(name)=output		    end if		  end if		  		  return output		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function readS(name as String) As String		  dim output as string		  dim temp as string		  		  output = read(name,temp)		  		  return output		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub readSpeechText()		  //This will read from the language.xml file in the root directory		  dim fileLanguage as FolderItem		  dim xdoc as XmlDocument		  dim root as XmlNode		  dim i,count as Integer		  dim item as string		  dim language as string		  		  language = readS("languageFile")		  		  //See if we are using a translation		  if language = "language.xml" or language = "" then		    fileLanguage = GetFolderItem("language.xml")		  else		    fileLanguage = GetFolderItem("translations").Child(language)		  end if		  		  if fileLanguage.Exists then		    		    xdoc = New XmlDocument(fileLanguage)//parses all the information required into the xml object		    		    count = xdoc.DocumentElement.ChildCount		    		    for i=0 to count-1		      root = xdoc.DocumentElement.Child(i)		      		      if root.FirstChild <> Nil then		        item = root.FirstChild.Value		      else		        Continue		      end if		      		      //Check the actual values from the file here		      select case root.Name		        		      case "language_name"		        speechText.Value("language_name") = item		        //The following is speech text		      case "seconds"		        speechText.Value("seconds") = item		        		      case "hours"		        speechText.Value("hours") = item		        		      case "hour"		        speechText.Value("hour") = item		        		      case "minutes"		        speechText.Value("minutes") = item		        		      case "countdownone"		        speechText.Value("countdownone") = item		        		      case "countdowntwo"		        speechText.Value("countdowntwo") = item		        		      case "countdownthree"		        speechText.Value("countdownthree") = item		        		      case "countdownfour"		        speechText.Value("countdownfour") = item		        		      case "countdownfive"		        speechText.Value("countdownfive") = item		        		      case "bestlap"		        speechText.Value("bestlap") = item		        		      case "fastestlap"		        speechText.Value("fastestlap") = item		        		      case "takesthelead"		        speechText.Value("takesthelead") = item		        		      case "timelimitreached"		        speechText.Value("timelimitreached") = item		        		      case "laplimitreached"		        speechText.Value("laplimitreached") = item		        		      case "finished"		        speechText.Value("finished") = item		        		      case "racecomplete"		        speechText.Value("racecomplete") = item		        		      case "secondsremaining"		        speechText.Value("secondsremaining") = item		        		      case "minuteremaining"		        speechText.Value("minuteremaining") = item		        		      case "minutesremaining"		        speechText.Value("minutesremaining") = item		        		      case "hourremaining"		        speechText.Value("hourremaining") = item		        		      case "hourandremaining"		        speechText.Value("hourandremaining") = item		        		      case "hoursremaining"		        speechText.Value("hoursremaining") = item		        		      case "hoursandremaining"		        speechText.Value("hoursandremaining") = item		        		      case "in"		        speechText.Value("in") = item		        		      case "currentlyin"		        speechText.Value("currentlyin") = item		        		      case "with"		        speechText.Value("with") = item		        		      case "laps"		        speechText.Value("laps") = item		        		      case "followedby"		        speechText.Value("followedby") = item		        		      case "timedout"		        speechText.Value("timedout") = item		        		      case "preparetorace"		        speechText.Value("preparetorace") = item		        		      case "onpacefor"		        speechText.Value("onpacefor") = item		        		      case "lapsremaining"		        speechText.Value("lapsremaining") = item		        		      case "lastlap"		        speechText.Value("lastlap") = item		        		      case "takes"		        speechText.Value("takes") = item		        		        //Eventually displayed text will go here		        		      end select		      		      		    next		  else		    return		    		  end if		  		Exception e as RuntimeException		  		  MsgBox "Exception error occured while reading the language file, using default speech values instead"		  //GM_Exception(e)		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub upgradePreferences()		  dim version as integer		  version = read("version",version)		  		  		  if version < 1 then		    //This upgrade will read in preferences from the xml file and write them to the database		    dim filePreference as FolderItem = GetFolderItem("preferences.xml")		    dim xdoc as XmlDocument		    dim root as XmlNode		    dim i,count as Integer		    dim item as string		    		    xdoc = New XmlDocument(filePreference)//parses all the information required into the xml object		    		    count = xdoc.DocumentElement.ChildCount		    for i=0 to count-1		      root = xdoc.DocumentElement.Child(i)		      		      //Make sure the element has a value		      if root.FirstChild <> Nil then		        item = root.FirstChild.Value		      else		        continue		      end if		      		      //Write the element to the new preferences database		      write(root.name,item)		    next		    		    //Decode password for storage		    if readS("emailPassword") <> "" then		      write("emailPassword",DecodeBase64(readS("emailPassword")))		    end if		    		    //Upgrade complete, define new version		    write("version",1)		    		  end if		  		  //Change theme away from default since we are renaming it in the database upgrade		  if version < 2 then		    if readS("themeName") = "default" then		      write("themeName","Flip Side")		    end if		    		    //Upgrade complete, define new version		    write("version",2)		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub write(name as string, value as Boolean)		  dim convertedValue as string		  		  if value = True then		    convertedValue = "TRUE"		  else		    convertedValue = "FALSE"		  end if		  		  writeRaw(name,convertedValue)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub write(name as string, value as color)		  dim convertedValue as string		  		  if name = "" then		    return		  end if		  		  convertedValue = GM_colorToString(value)		  		  writeRaw(name,convertedValue)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub write(name as string, value as Double)		  dim convertedValue as string		  		  convertedValue = cstr(value)		  		  writeRaw(name,convertedValue)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub write(name as string, value as Integer)		  dim convertedValue as string		  		  convertedValue = cstr(value)		  		  writeRaw(name,convertedValue)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub write(name as string, value as String)		  writeRaw(name, value)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub writeRaw(name as String, value as String)		  dim rs as RecordSet		  dim r as DatabaseRecord		  		  if name = "" then		    return		  end if		  		  //Update the cache so we do not always have to do database lookups		  cache.Value(name) = value		  		  //Update the database for permanent storage		  rs =  G_Database.SQLSelect("SELECT * FROM preferences_table WHERE name='" + name + "'")		  		  if rs <> Nil then		    if rs.RecordCount > 0 then		      rs.Edit		      rs.Field("value").StringValue = value		      rs.Update		      		    else		      r = New DatabaseRecord		      r.Column("name")=name		      r.Column("value")=value		      G_Database.InsertRecord("preferences_table",r)		      		    end if		    		  end if		  		  G_Database.Commit()		End Sub	#tag EndMethod	#tag Note, Name = LICENSE		Copyright 2008 Jeremy Auten				This file is part of Flip Side Racing Software.				Flip Side Racing Software is free software: you can redistribute it and/or modify		it under the terms of the GNU General Public License as published by		the Free Software Foundation, either version 3 of the License, or		(at your option) any later version.				Flip Side Racing Software is distributed in the hope that it will be useful,		but WITHOUT ANY WARRANTY; without even the implied warranty of		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		GNU General Public License for more details.				You should have received a copy of the GNU General Public License		along with Flip Side Racing Software.  If not, see <http://www.gnu.org/licenses/>.	#tag EndNote	#tag Property, Flags = &h0		appStartTime As Double	#tag EndProperty	#tag Property, Flags = &h0		backgroundImage As picture	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			When an object is read we will check the cache before looking in the database.						Write operations will update both the cache and database						This will help with operations that do lots of lookups to preferences as they no longer require repeated database queries		#tag EndNote		cache As Dictionary	#tag EndProperty	#tag Property, Flags = &h0		chassisParts(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		classParts(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		clubLogo As picture	#tag EndProperty	#tag Property, Flags = &h0		clubLogoPath As string	#tag EndProperty	#tag Property, Flags = &h0		crystals(-1) As string	#tag EndProperty	#tag Property, Flags = &h21		Private defaults As dictionary	#tag EndProperty	#tag Property, Flags = &h0		emptyRacerImage As picture	#tag EndProperty	#tag Property, Flags = &h0		emptyRacerMaskImage As picture	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			This variable exists to prevent repeated database lookups during a race		#tag EndNote		hardwareType As String	#tag EndProperty	#tag Property, Flags = &h0		lapTimeFormat As String = "0.00"	#tag EndProperty	#tag Property, Flags = &h0		mainLogoImage As picture	#tag EndProperty	#tag Property, Flags = &h0		mainLogoImageMask As picture	#tag EndProperty	#tag Property, Flags = &h0		makeParts(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		maxRacers As Integer = 50	#tag EndProperty	#tag Property, Flags = &h0		modelParts(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		motorParts(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		rankAnnInterval As Integer = 4	#tag EndProperty	#tag Property, Flags = &h0		rankAnnoucements As boolean = false	#tag EndProperty	#tag Property, Flags = &h0		relayPort As string = "None"	#tag EndProperty	#tag Property, Flags = &h0		rowSpacing As Integer = 13	#tag EndProperty	#tag Property, Flags = &h0		scaleParts(-1) As string	#tag EndProperty	#tag Property, Flags = &h0		slotColors(49) As color = &cB0B0B0	#tag EndProperty	#tag Property, Flags = &h0		speechText As dictionary	#tag EndProperty	#tag Property, Flags = &h0		S_CarLapBeep As sound	#tag EndProperty	#tag Property, Flags = &h0		S_Countdown0 As sound	#tag EndProperty	#tag Property, Flags = &h0		S_CountdownBeep As Sound	#tag EndProperty	#tag Property, Flags = &h0		S_EndTheRace As sound	#tag EndProperty	#tag Property, Flags = &h0		theRaceObject As raceobject	#tag EndProperty	#tag Property, Flags = &h0		useAudio As boolean	#tag EndProperty	#tag ViewBehavior		#tag ViewProperty			Name="appStartTime"			Group="Behavior"			InitialValue="0"			Type="Double"		#tag EndViewProperty		#tag ViewProperty			Name="backgroundImage"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="ClubLogo"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="clubLogoPath"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="emptyRacerImage"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="emptyRacerMaskImage"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="hardwareType"			Group="Behavior"			InitialValue="0"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="lapTimeFormat"			Group="Behavior"			InitialValue="0.00"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="mainLogoImage"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="mainLogoImageMask"			Group="Behavior"			InitialValue="0"			Type="picture"		#tag EndViewProperty		#tag ViewProperty			Name="maxRacers"			Group="Behavior"			InitialValue="8"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="rankAnnInterval"			Group="Behavior"			InitialValue="4"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="rankAnnoucements"			Group="Behavior"			InitialValue="false"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="relayPort"			Group="Behavior"			InitialValue="None"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="rowSpacing"			Group="Behavior"			InitialValue="13"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="S_CarLapBeep"			Group="Behavior"			InitialValue="0"			Type="sound"		#tag EndViewProperty		#tag ViewProperty			Name="S_Countdown0"			Group="Behavior"			InitialValue="0"			Type="sound"		#tag EndViewProperty		#tag ViewProperty			Name="S_CountdownBeep"			Group="Behavior"			InitialValue="0"			Type="Sound"		#tag EndViewProperty		#tag ViewProperty			Name="S_EndTheRace"			Group="Behavior"			InitialValue="0"			Type="sound"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="useAudio"			Group="Behavior"			InitialValue="0"			Type="boolean"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass