#tag ClassProtected Class eventManager	#tag Method, Flags = &h0		Function addClass(className as string) As integer		  dim status as boolean		  dim returnID as integer		  		  returnID = insertItem(eventID, className, typeClass, 0, 0, true)		  		  //We failed to add a class		  if returnID = -1 then		    return returnID		  end if		  		  //We succedded, raise an event and set status		  classAdded(className, str(returnID))		  		  //We also need to add the heat rounds so heat rosters can be generated after racers are registered for this event		  if qRounds < 1 then		    //No rounds, this is weird but we definately should not do anything then		    return returnID		  end if		  		  dim i as integer		  for i = 1 to qRounds		    addHeatRound(returnID,i)		  next		  		  //For mains we also add a round, though in most cases there will only be 1 round		  		  		  return returnID		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub addClassRacer(racerID as string, racerName as string, classID as string)		  dim status as boolean		  dim returnID as integer		  		  returnID = insertItem(val(classID), racerID, typeClassRoster, val(racerID), 0, true)		  		  //We failed to add a class		  if returnID = -1 then		    return		  end if		  		  //We succedded, raise an event and set status		  classRacerAdded(classID, racerID, racerName)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addHeat(roundID as integer, heatID as integer = - 1)		  dim returnID as integer		  dim newHeatID as Integer		  dim heatName as string		  dim query as string		  dim rs as RecordSet		  		  //check to see if we are supposed to figure out the round id		  if heatID = -1 then		    //Need to figure out the next id		    query = "SELECT MAX(value) FROM event_items WHERE parent_id = '" + str(roundID) + "' AND type = '" + str(typeHeats) + "'"		    rs = db.SQLSelect(query)		    if rs.RecordCount > 0 then		      newHeatID = rs.Field("MAX(value)").IntegerValue + 1		    end if		    		  else		    newHeatID = heatID		    		  end if		  		  heatName = t_heat + " " + str(newHeatID)		  returnID = insertItem(roundID, heatName, typeHeats, newHeatID, 0, true)		  		  //We failed to add a class		  if returnID = -1 then		    return		  end if		  		  //We succedded, raise an event and set status		  heatAdded(heatName, str(returnID))		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addHeatRacer(racerID as string, racerName as string, heatID as string)		  dim status as boolean		  dim returnID as integer		  		  returnID = insertItem(val(heatID), racerID, typeHeatRoster, val(racerID), 0, true)		  		  //We failed to add a class		  if returnID = -1 then		    return		  end if		  		  //We succedded, raise an event and set status		  heatRacerAdded(heatID, racerID, racerName)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addHeatRound(classID as integer, roundID as integer = - 1)		  dim returnID as integer		  dim newRoundID as Integer		  dim roundName as string		  dim query as string		  dim rs as RecordSet		  		  //check to see if we are supposed to figure out the round id		  if roundID = -1 then		    //Need to figure out the next id		    query = "SELECT MAX(value) FROM event_items WHERE parent_id = '" + str(classID) + "' AND type = '" + str(typeHeatRounds) + "'"		    rs = db.SQLSelect(query)		    if rs.RecordCount > 0 then		      newRoundID = rs.Field("MAX(value)").IntegerValue + 1		    end if		    		  else		    newRoundID = roundID		    		  end if		  		  roundName = t_round + " " + str(newRoundID)		  MsgBox str(classID)		  returnID = insertItem(classID, roundName, typeHeatRounds, newRoundID, 0, true)		  		  //We failed to add a class		  if returnID = -1 then		    return		  end if		  		  //We succedded, raise an event and set status		  heatRoundAdded(roundName, str(returnID))		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addMain(classID as string)		  dim returnID as integer		  dim newMainID as Integer		  dim mainName as string		  dim query as string		  dim rs as RecordSet		  		  //Need to figure out the next id		  query = "SELECT MAX(value) FROM event_items WHERE parent_id = '" + classID + "' AND type = '" + str(typeMains) + "'"		  rs = db.SQLSelect(query)		  if rs.RecordCount > 0 then		    newMainID = rs.Field("MAX(value)").IntegerValue + 1		  else		    newMainID = 1		  end if		  		  //Build the name of the main		  select case newMainID		    		  case 1		    mainName = "A Main"		    		  case 2		    mainName = "B Main"		    		  case 3		    mainName = "C Main"		    		  case 4		    mainName = "D Main"		    		  case 5		    mainName = "E Main"		    		  case 6		    mainName = "F Main"		    		  case 7		    mainName = "G Main"		    		  case 8		    mainName = "H Main"		    		  else		    mainName = "Main " + str(newMainID)		  end select		  		  returnID = insertItem(val(classID), mainName, typeMains, newMainID, 0, true)		  		  //We failed to add a main		  if returnID = -1 then		    return		  end if		  		  //We succedded, raise an event and set status		  mainAdded(mainName, str(returnID))		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub addMainRacer(racerID as string, racerName as string, mainID as string)		  dim status as boolean		  dim returnID as integer		  		  returnID = insertItem(val(mainID), racerID, typeMainRoster, val(racerID), 0, true)		  		  //We failed to add a class		  if returnID = -1 then		    return		  end if		  		  //We succedded, raise an event and set status		  mainRacerAdded(mainID, racerID, racerName)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function addRegisteredRacer(id as String) As Boolean		  dim rs as RecordSet		  dim r as DatabaseRecord		  dim query as string		  dim success as boolean		  success = false		  		  if id.Trim = "" then		    //no info return		    Return success		  end if		  		  //Check to see if this racer is already added		  query = "SELECT * FROM event_racer_table WHERE event_id = " + str(eventID) + " AND racer_id = " + id		  rs = db.SQLSelect(query)		  //Make sure there is no match		  if rs <> Nil then		    if rs.RecordCount > 0 then		      success = false		      Return success		    end if		  end if		  		  //No match so we can insert a new record		  r = new DatabaseRecord		  		  r.IntegerColumn("event_id")=eventID		  r.IntegerColumn("racer_id")=val(id)		  		  db.InsertRecord("event_racer_table",r)		  		  if db.Error = False then		    success = true		  end if		  		  db.Commit		  		  return success		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function createEvent(theName as String) As Boolean		  dim r as DatabaseRecord		  dim rs as RecordSet		  dim query as string		  dim success as boolean		  		  success = false		  		  //Ensure we have a name to work with		  if theName.Trim <> "" then		    //Check to see if an existing record with the same name		    query = "SELECT * FROM event_table WHERE name = '" + theName + "'"		    rs = db.SQLSelect(query)		    if rs <> Nil then		      if rs.RecordCount > 0 then		        MsgBox "Error, duplicate name"		        success = false		        Return success		      end if		    end if		    		    r = New DatabaseRecord		    		    r.Column("name")=theName		    r.BooleanColumn("open")=True		    r.IntegerColumn("mBumpUps")=mBumpUps		    r.IntegerColumn("mNumOfDrivers")=mNumOfDrivers		    r.Column("mRaceProfile")=mRaceProfile		    r.IntegerColumn("qNumOfDrivers")=qNumOfDrivers		    r.Column("qRaceProfile")=qRaceProfile		    r.IntegerColumn("qRounds")=qRounds		    r.IntegerColumn("qSortingMethod")=qSortingMethod		    		    db.InsertRecord("event_table",r)		    		    if db.Error = False then		      success = true		      eventCreated(theName)		      query = "SELECT * FROM event_table WHERE name = '" + theName + "'"		      rs = db.SQLSelect(query)		      eventID = rs.Field("event_id").IntegerValue		      		    end if		    db.Commit		  end if		  		  return success		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub deleteClass(classID as string)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function deleteEvent(theName as string) As boolean		  dim success as boolean		  success = false		  		  if  theName.trim <> "" then		    db.SQLExecute("DELETE FROM event_table WHERE name = '" + theName + "'")		    db.Commit		    		    if db.Error = false then		      success = true		      eventDeleted(theName)		      		    end if		  end if		  		  return success		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub deleteHeat(heatID as string)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub deleteMain(mainID as string)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function deleteRegisteredRacer(id as String) As Boolean		  dim success as boolean		  success = false		  		  if  id.trim <> "" then		    db.SQLExecute("DELETE FROM event_racer_table WHERE event_id = " + str(eventID) + "AND racer_id = " + id)		    db.Commit		    		    if db.Error = false then		      success = true		      		    end if		  end if		  		  return success		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub deleteRound(roundID as string)		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function getItems(parent_id as string, type as Integer) As dictionary		  dim results as new Dictionary		  dim query as string		  dim rs as RecordSet		  dim i as integer		  		  query = "SELECT * FROM event_items WHERE event_id = '" + str(eventID) + "' AND type = '" + str(type) + "' AND parent_id = '" + parent_id + "'"		  rs = db.SQLSelect(query)		  		  if rs = Nil then		    return results		  end if		  		  //Build the dictionary to return		  for i = 1 to rs.RecordCount		    results.Value(rs.Field("id").StringValue) = rs.Field("name").StringValue		    rs.MoveNext		  next		  		  		  		  return results		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function getRacerNameCar(id as String) As string		  dim nameCar as string		  dim car as string		  dim query as string		  dim rs as recordSet		  		  query = "SELECT name FROM racer_table WHERE racer_id = " + id		  		  rs = db.SQLSelect(query)		  		  //Make sure there is a match		  if rs <> Nil then		    if rs.RecordCount > 0 then		      while not rs.EOF		        nameCar = rs.Field("name").StringValue		        rs.MoveNext		      wend		    end if		  end if		  		  return nameCar		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub initialize(tempdb as REALSQLDatabase)		  //db = new REALSQLDatabase		  db = tempdb		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function insertItem(parent_id as Integer, name as String, type as Integer, value as Integer, status as Integer, checkName as boolean) As integer		  dim r as DatabaseRecord		  dim rs as RecordSet		  dim query as string		  dim recordID as string		  dim returnID as integer		  		  returnID = -1		  		  //Ensure we have a name to work with		  if name.Trim = "" then		    MsgBox "Please enter a name"		    return returnID		  end if		  		  if checkName = True then		    query = "SELECT * FROM event_items WHERE name = '" + name + "' AND event_id = '" + str(eventID)+ "' AND parent_id = '" + str(parent_id) + "'"		    rs = db.SQLSelect(query)		    if rs <> Nil then		      if rs.RecordCount > 0 then		        MsgBox "Please enter a unique name"		        Return returnID		      end if		    end if		  end if		  		  		  r = New DatabaseRecord		  		  r.Column("name")=name		  r.IntegerColumn("parent_id")=parent_id		  r.IntegerColumn("event_id")=eventID		  r.IntegerColumn("type")=type		  r.IntegerColumn("value")=value		  r.IntegerColumn("status")=status		  		  db.InsertRecord("event_items",r)		  		  if db.Error = False then		    db.Commit		  else		    db.Rollback		    return returnID		  end if		  		  if db.Error = True then		    return returnID		  end if		  		  //Since we have succedded in inserting a record lets get the ID and return that		  query = "SELECT * FROM event_items WHERE name = '" + name + "' AND parent_id = '" + str(parent_id) + "' AND event_id = '" + str(eventID) + "' AND type = '" + str(type) + "' AND value = '" + str(value) + "'"		  rs = db.SQLSelect(query)		  returnID = rs.Field("id").IntegerValue		  		  MsgBox "Item Inserted"		  return returnID		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub linkRace(raceID as Integer, eventItemID as Integer, raceName as string)		  dim returnID as integer		  		  returnID = insertItem(eventItemID, raceName, typeHeatRace, raceID, 0 , false)		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function listClasses() As dictionary		  dim classList as new Dictionary		  		  classList = getItems(str(eventID),typeClass)		  		  return classList		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listClassRacers(classID as string) As dictionary		  dim tempClassRacer as new dictionary		  dim classRacer as new dictionary		  dim i as integer		  dim racerName as string		  		  tempClassRacer = getItems(classID,typeClassRoster)		  		  //For the racers we need to get the name, we do not store it in the event items table since racers get commonly renamed		  for i = 0 to tempClassRacer.Count - 1		    racerName = getRacerNameCar(tempClassRacer.Value(tempClassRacer.key(i)))		    		    classRacer.Value(tempClassRacer.Value(tempClassRacer.key(i).StringValue)) = racerName		    		  next		  		  return classRacer		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listHeatRacers(heatID as string) As dictionary		  dim tempHeatRacer as new dictionary		  dim heatRacer as new dictionary		  dim i as integer		  dim racerName as string		  		  tempHeatRacer = getItems(heatID,typeHeatRoster)		  		  //For the racers we need to get the name, we do not store it in the event items table since racers get commonly renamed		  for i = 0 to tempHeatRacer.Count - 1		    racerName = getRacerNameCar(tempHeatRacer.Value(tempHeatRacer.key(i)))		    		    heatRacer.Value(tempHeatRacer.Value(tempHeatRacer.key(i).StringValue)) = racerName		    		  next		  		  return heatRacer		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listHeatRounds(classID as string) As Dictionary		  //List the rounds of heats for a particular event		  //Dictionary is used so we can return the heat name and id		  dim roundList as new Dictionary		  		  roundList = getItems(classID,typeHeatRounds)		  		  return roundList		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listHeats(heatRoundID as string) As dictionary		  //Returns a list of all defined heats for an event including ones that have been completed		  //Dictionary is used so we can return the heat name and id		  dim heatList as new Dictionary		  		  heatList = getItems(heatRoundID,typeHeats)		  		  return heatList		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listMainRacers(mainID as string) As Dictionary		  dim tempMainRacer as new dictionary		  dim mainRacer as new dictionary		  dim i as integer		  dim racerName as string		  		  tempMainRacer = getItems(mainID,typeMainRoster)		  		  //For the racers we need to get the name, we do not store it in the event items table since racers get commonly renamed		  for i = 0 to tempMainRacer.Count - 1		    racerName = getRacerNameCar(tempMainRacer.Value(tempMainRacer.key(i)))		    		    mainRacer.Value(tempMainRacer.Value(tempMainRacer.key(i).StringValue)) = racerName		    		  next		  		  return mainRacer		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listMains(classID as string) As dictionary		  dim mainList as new Dictionary		  		  mainList = getItems(classID,typeMains)		  		  Return mainList		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listOpenEvents() As string()		  //Returns a list of open events to manage		  dim returnstring() as string		  		  dim rs as RecordSet		  dim i as integer		  		  //Only select open events		  rs = db.SQLSelect("SELECT * FROM event_table")		  		  //Get the names from the database		  if rs <> nil then		    for i = 1 to rs.RecordCount		      //while not rs.EOF		      returnstring.Append(rs.Field("name").StringValue)		      rs.MoveNext		      //wend		    next		  end if		  		  returnstring.Sort		  		  return returnstring		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listProfiles() As string()		  //Query database for list of profiles, first item in string must be none		  dim returnstring() as string		  dim rs as RecordSet		  dim i as integer		  		  rs = db.SQLSelect("SELECT * FROM raceprofile_table")		  		  //Get the names from the database		  if rs <> nil then		    for i = 1 to rs.RecordCount		      //while not rs.EOF		      returnstring.Append(rs.Field("name").StringValue)		      rs.MoveNext		      //wend		    next		  end if		  		  returnstring.Sort		  		  returnstring.Insert(0,"none")		  		  return returnstring		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listRacersForRace(raceID as String) As Dictionary		  //Sends back racer names and ids		  dim racerList as new Dictionary		  		  racerList.Value("8") = "Bob"		  racerList.Value("10") = "Linda"		  racerList.Value("11") = "Zed"		  		  Return racerList		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function listRegisteredRacers() As dictionary		  //Sends back racer names and ids		  dim racerList as new Dictionary		  		  racerList.Value("8") = "Bob"		  racerList.Value("9") = "George"		  racerList.Value("10") = "Linda"		  racerList.Value("11") = "Zed"		  		  Return racerList		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function loadEvent(theName as String) As Boolean		  dim status as boolean		  dim rs as RecordSet		  dim query as string		  		  status = false		  		  query = "SELECT * FROM event_table WHERE name='" + theName + "'"		  rs = db.SQLSelect(query)		  if rs <> NIL then		    		    //We have a record to read		    name = rs.Field("name").StringValue		    mBumpUps = rs.Field("mBumpUps").IntegerValue		    mNumOfDrivers = rs.Field("mNumOfDrivers").IntegerValue		    mRaceProfile = rs.Field("mRaceProfile").StringValue		    qNumOfDrivers = rs.Field("qNumOfDrivers").IntegerValue		    qRaceProfile = rs.Field("qRaceProfile").StringValue		    qRounds = rs.Field("qRounds").IntegerValue		    qSortingMethod = rs.Field("qSortingMethod").IntegerValue		    eventID = rs.Field("event_id").IntegerValue		    		    status = true		    eventLoaded(name)		    		  else		    status = false		    		  end if		  		  return status		  		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function saveEvent() As Boolean		  dim status as boolean		  dim rs as RecordSet		  dim query as string		  		  status = false		  		  query = "SELECT * FROM event_table WHERE name='" + name + "'"		  rs = db.SQLSelect(query)		  if rs <> NIL then		    if rs.RecordCount > 0 then		      //We have a record to update		      		      rs.Edit		      rs.Field("mBumpUps").IntegerValue = mBumpUps		      rs.Field("mNumOfDrivers").IntegerValue = mNumOfDrivers		      rs.Field("mRaceProfile").StringValue = mRaceProfile		      rs.Field("qNumOfDrivers").IntegerValue = qNumOfDrivers		      rs.Field("qRaceProfile").StringValue = qRaceProfile		      rs.Field("qRounds").IntegerValue = qRounds		      rs.Field("qSortingMethod").IntegerValue = qSortingMethod		      rs.Update		      		      		      if db.Error = false then		        status = true		        eventSaved		        		      end if		      db.Commit		    else		      		      //Error finding record, create new record instead		      status = createEvent(name)		      		    end if		    		  end if		  		  		  		  return status		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub startRace()		  		End Sub	#tag EndMethod	#tag Hook, Flags = &h0		Event classAdded(name as string, id as string)	#tag EndHook	#tag Hook, Flags = &h0		Event classRacerAdded(classID as string, racerID as string, racerName as string)	#tag EndHook	#tag Hook, Flags = &h0		Event eventCreated(theName as string)	#tag EndHook	#tag Hook, Flags = &h0		Event eventDeleted(theName as String)	#tag EndHook	#tag Hook, Flags = &h0		Event eventLoaded(theName as String)	#tag EndHook	#tag Hook, Flags = &h0		Event eventSaved()	#tag EndHook	#tag Hook, Flags = &h0		Event heatAdded(name as string, id as string)	#tag EndHook	#tag Hook, Flags = &h0		Event heatRacerAdded(heatID as string, racerID as string, racerName as string)	#tag EndHook	#tag Hook, Flags = &h0		Event heatRoundAdded(name as string, id as string)	#tag EndHook	#tag Hook, Flags = &h0		Event mainAdded(name as string, id as string)	#tag EndHook	#tag Hook, Flags = &h0		Event mainRacerAdded(mainID as string, racerID as string, racerName as string)	#tag EndHook	#tag Hook, Flags = &h0		Event startRace(eventID as integer, itemID as integer, profileName as string)	#tag EndHook	#tag Property, Flags = &h0		db As REALSQLDatabase	#tag EndProperty	#tag Property, Flags = &h0		eventID As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Sets the number of bumps from each main		#tag EndNote		mBumpUps As Integer = 0	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Maximum number of racers in mains		#tag EndNote		mNumOfDrivers As Integer = 8	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Race settings for the mains		#tag EndNote		mRaceProfile As String	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			The name of this event		#tag EndNote		name As string	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			race		#tag EndNote		qNumOfDrivers As Integer = 8	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Select the race profile settings		#tag EndNote		qRaceProfile As String	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			Sets the number of rounds each racer will race		#tag EndNote		qRounds As Integer = 1	#tag EndProperty	#tag Property, Flags = &h0		#tag Note			sets the sorting method used by qualifiers		#tag EndNote		qSortingMethod As Integer = 0	#tag EndProperty	#tag Constant, Name = typeClass, Type = Double, Dynamic = False, Default = \"10", Scope = Public	#tag EndConstant	#tag Constant, Name = typeClassRoster, Type = Double, Dynamic = False, Default = \"11", Scope = Public	#tag EndConstant	#tag Constant, Name = typeHeatRace, Type = Double, Dynamic = False, Default = \"23", Scope = Public	#tag EndConstant	#tag Constant, Name = typeHeatRoster, Type = Double, Dynamic = False, Default = \"22", Scope = Public	#tag EndConstant	#tag Constant, Name = typeHeatRounds, Type = Double, Dynamic = False, Default = \"20", Scope = Public	#tag EndConstant	#tag Constant, Name = typeHeats, Type = Double, Dynamic = False, Default = \"21", Scope = Public	#tag EndConstant	#tag Constant, Name = typeMainRace, Type = Double, Dynamic = False, Default = \"33", Scope = Public	#tag EndConstant	#tag Constant, Name = typeMainRoster, Type = Double, Dynamic = False, Default = \"32", Scope = Public	#tag EndConstant	#tag Constant, Name = typeMainRounds, Type = Double, Dynamic = False, Default = \"30", Scope = Public	#tag EndConstant	#tag Constant, Name = typeMains, Type = Double, Dynamic = False, Default = \"31", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="eventID"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="2147483648"			Type="Integer"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="mBumpUps"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="mNumOfDrivers"			Group="Behavior"			InitialValue="8"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="mRaceProfile"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="qNumOfDrivers"			Group="Behavior"			InitialValue="8"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="qRaceProfile"			Group="Behavior"			Type="String"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="qRounds"			Group="Behavior"			InitialValue="1"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="qSortingMethod"			Group="Behavior"			InitialValue="0"			Type="Integer"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass