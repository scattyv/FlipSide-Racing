#tag ModuleProtected Module Globals	#tag Method, Flags = &h0		Sub GM_AnimateStatisticsCanvas(racers() as racecar, title as string, xLabel as string, yLabel as string, statisticsCanvas as figure, graphType as string)		  mainwindow.statisticsCanvas.Initialize ' initialize the figure so it gets rid of old graphs and prepares for new		  		  dim g as Graph = statisticsCanvas.Graph(0)		  dim tr as Trace		  		  dim yaxisticks() as double		  		  		  g.ShowLegend=true		  g.Legend.Location = 1		  //Set the text color to the theme color		  g.TextColor = mainWindow.fsTheme.statisticsScreenText		  		  for i as integer=0 to UBound(racers)//go through all the active indexes and draw there datas		    		    //Do not graph this racer if there is nothing to graph		    if UBound(racers(i).lapcounts) = 0 then		      continue		    end if		    		    //Cheesy way to remove Lap 0 from the graph		    //Removed to speed up process as live graphing is CPU intensive		    //redim lapCounts(-1)		    //redim lapTimes(-1)		    //redim lagTimes(-1)		    //redim timeAtLap(-1)		    		    //for j as integer = 1 to Ubound(racers(i).lapCounts)		    //lapCounts.Append racers(i).lapCounts(j)		    //lapTimes.Append racers(i).lapTimes(j)		    //lagTimes.Append racers(i).lagTimes(j)		    //timeAtLap.Append racers(i).timeAtLap(j)		    //next		    		    //theName = racers(i).theName		    		    select case graphType		    case "Lag_Graph"		      tr = g.Plot(racers(i).lapCounts,racers(i).lagTimes)		    case "Time_Graph"		      tr = g.Plot(racers(i).lapTimes,racers(i).lapCounts)		    case "Time_Per_Lap"		      tr = g.Plot(racers(i).lapCounts,racers(i).timeAtLap)		    case "Rank_Time"		      tr = g.Plot(racers(i).lapTimes,racers(i).lapPlaces)		      		    else		      MsgBox "Error: Unknown Graph Type"		    end select		    tr.DisplayName = racers(i).theName		    		    tr.LineColor = racers(i).textColor		    		  next		  		  //If graph type is Rank versus Time then we need to create tick marks as integers on the y axis for ranks		  if graphType = "Rank_Time" then		    g.MinY = 0		    //we need to adjust the max of the y axis if we only have 1 racer		    if UBound(racers) = 0 then		      g.AutoFitY		      g.MaxY = g.MaxY + 1		      for k as integer = 0 to g.MaxY - 1		        yaxisticks.Append(k)		      next		      g.YTick = yaxisticks		    else		      g.MaxY = UBound(racers) + 2		      for k as integer = 0 to UBound(racers) + 1		        yaxisticks.Append(k)		        		      next		      g.YTick = yaxisticks		      		    end if		    		  end if		  		  //for i as integer=0 to UBound(racers)//handles setting the graph color for the racer according to what the slot was set to.		  //g.Trace(i).LineColor=G_Preferences.slotColors(i)//for now just use color defaulting for 0-7		  //next		  		  g.Title = Title		  g.XLabel = xLabel		  g.YLabel = yLabel		  		  //Set the background so we have a somewhat transparent look		  statisticsCanvas.windowBackground = mainWindow.Backdrop		  		  		  statisticsCanvas.Draw		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GM_CreateDatabaseAndTables()		  //WARNING!! If you modify this method make sure to put the appropriate logic in the GM_UpgradeDatabase method to upgrade old databases		  //WARNING!! This will delete all old data if called! This function should only run once~		  		  		  GM_LogToSplash("Creating Database")		  		  dim rec as DatabaseRecord		  rec = New DatabaseRecord		  		  		  if G_Database.CreateDatabaseFile() then		    if G_Database.Connect() then		      dim query as string		      query = "CREATE TABLE event_table (event_id INTEGER PRIMARY KEY"+_		      ",event_name VARCHAR,race_type VARCHAR,num_laps INTEGER,time_limit FLOAT, min_lap_time FLOAT, count_down_time INTEGER"+_		      ", round_type VARCHAR,date_added DATETIME, rankmethod VARCHAR, UNIQUE(event_name))"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (event_table):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE racer_table (racer_id INTEGER PRIMARY KEY,name VARCHAR,uid VARCHAR, scale VARCHAR, chassis VARCHAR, class VARCHAR, make VARCHAR, model VARCHAR, motor VARCHAR,image BLOB, imagepath BLOB, imagemaskpath BLOB, imagemask BLOB, name_pronounce VARCHAR, rankmethod VARCHAR, UNIQUE(uid))"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (racer_table):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE raceprofile_table (id INTEGER PRIMARY KEY,name VARCHAR,racetype VARCHAR, numberoflaps INTEGER, timelimit FLOAT, minlaptime FLOAT, countdown INTEGER, roundtype VARCHAR, timeout INTEGER, lapindication VARCHAR, enablerankannouncement BOOLEAN, rankinterval INTEGER, autodeleteracers BOOLEAN, staggeredstart BOOLEAN, UNIQUE(name))"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (racer_table):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE event_racer_table (id INTEGER PRIMARY KEY,racer_id INTEGER,event_id INTEGER)"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (event_racer_table):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE laps_table (id INTEGER PRIMARY KEY,event_id INTEGER,racer_id INTEGER, lap_number INTEGER, lap_time FLOAT,lag_time FLOAT,time_at_lap FLOAT)"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (laps_table):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE laps_backup_table (id INTEGER PRIMARY KEY,event_id INTEGER,racer_id INTEGER, lap_number INTEGER, lap_time FLOAT,lag_time FLOAT,time_at_lap FLOAT)"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (laps_backup_table):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE summary_table (id INTEGER PRIMARY KEY,event_id INTEGER,racer_id INTEGER, rank INTEGER, average_time FLOAT, best_lap INTEGER, best_time FLOAT, laps_leading INTEGER)"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (summary_table):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE lu_make (make_id INTEGER PRIMARY KEY,make VARCHAR, UNIQUE(make))"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (lu_make):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE lu_model (model_id INTEGER PRIMARY KEY,fk_make_id INTEGER,model VARCHAR)"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (lu_model):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE lu_style (style_id INTEGER PRIMARY KEY,fk_model_id INTEGER,style VARCHAR,style_image BLOB,style_image_mask BLOB)"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (lu_style):"+G_Database.ErrorMessage		      end if		      		      query = "CREATE TABLE dbinfo (id INTEGER PRIMARY KEY,version VARCHAR)"		      G_Database.SQLExecute(query)		      if G_Database.Error then		        MsgBox "Database Error (dbinfo):"+G_Database.ErrorMessage		      end if		      		      //Define the version of the database		      rec.IntegerColumn("version") = 6		      G_Database.InsertRecord("dbinfo",rec)		      		      G_Database.Commit()		    else		      MsgBox "Error Creating Database.  File could not be linked!"		    end if		  else		    MsgBox "Error, could not create database file.  Perhaps no 'File'"		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub GM_CreateInitialTheme()		  //Create an initial theme based on the current theme xml settings and hard set values		  dim tempTheme as theme		  dim f as FolderItem		  dim fileTheme as FolderItem = GetFolderItem("theme.xml")		  		  		  GM_LogToSplash("Creating Default Theme")		  		  tempTheme = new theme(G_Database)		  		  f = GetFolderItem("updates").Child("theme_default.txt")		  		  if f <> Nil then		    //We have a valid file, now we should open it and read the contents		    		    GM_LogToSplash("Importing Default Theme File")		    dim xdoc as XmlDocument		    dim root as XmlNode		    dim i,count as Integer		    dim item as string		    dim rec as DatabaseRecord		    dim theName as string		    rec = New DatabaseRecord		    xdoc = New XmlDocument(f)//parses all the information required into the xml object		    		    count = xdoc.DocumentElement.ChildCount		    		    for i=0 to count-1		      root = xdoc.DocumentElement.Child(i)		      		      item = root.FirstChild.Value		      		      select case root.Name		      case "name"		        rec.Column("name") = item		        //Set this variable for checking for duplicates later		        theName = item		      case "scaleBackground"		        if item = "true" then		          rec.BooleanColumn(root.Name) = True		        else		          rec.BooleanColumn(root.Name) = False		        end if		      case "backgroundColor"		        rec.Column(root.Name) = item		      case "defaultText"		        rec.Column(root.Name) = item		      case "generalConfigScreenText"		        rec.Column(root.Name) = item		      case "mainScreenText"		        rec.Column(root.Name) = item		      case "raceConfigScreenText1"		        rec.Column(root.Name) = item		      case "raceConfigScreenText2"		        rec.Column(root.Name) = item		      case "raceConfigScreenText3"		        rec.Column(root.Name) = item		      case "raceScreenText"		        rec.Column(root.Name) = item		      case "statisticsScreenText"		        rec.Column(root.Name) = item		      case "editRacerScreenText1"		        rec.Column(root.Name) = item		      case "editRacerScreenText2"		        rec.Column(root.Name) = item		      case "countdownBeep"		        rec.BlobColumn(root.Name) = item		      case "endingHorn"		        rec.BlobColumn(root.Name) = item		      case "startingHorn"		        rec.BlobColumn(root.Name) = item		      case "lapBeep"		        rec.BlobColumn(root.Name) = item		      case "backgroundImage"		        rec.BlobColumn(root.Name) = item		      case "editRacers_Button"		        rec.BlobColumn(root.Name) = item		      case "editRacers_Mask"		        rec.BlobColumn(root.Name) = item		      case "editRacers_MouseOver"		        rec.BlobColumn(root.Name) = item		      case "generalConfig_Button"		        rec.BlobColumn(root.Name) = item		      case "generalConfig_Mask"		        rec.BlobColumn(root.Name) = item		      case "generalConfig_MouseOver"		        rec.BlobColumn(root.Name) = item		      case "main_Button"		        rec.BlobColumn(root.Name) = item		      case "main_Mask"		        rec.BlobColumn(root.Name) = item		      case "main_MouseOver"		        rec.BlobColumn(root.Name) = item		      case "raceConfig_Button"		        rec.BlobColumn(root.Name) = item		      case "raceConfig_Mask"		        rec.BlobColumn(root.Name) = item		      case "raceConfig_MouseOver"		        rec.BlobColumn(root.Name) = item		      case "raceScreen_Button"		        rec.BlobColumn(root.Name) = item		      case "raceScreen_Mask"		        rec.BlobColumn(root.Name) = item		      case "raceScreen_MouseOver"		        rec.BlobColumn(root.Name) = item		      case "emptyRacer"		        rec.BlobColumn(root.Name) = item		      case "emptyRacer_Mask"		        rec.BlobColumn(root.Name) = item		      case "mainLogo"		        rec.BlobColumn(root.Name) = item		      case "mainLogo_Mask"		        rec.BlobColumn(root.Name) = item		      case "statistics_Button"		        rec.BlobColumn(root.Name) = item		      case "statistics_Mask"		        rec.BlobColumn(root.Name) = item		      case "statistics_MouseOver"		        rec.BlobColumn(root.Name) = item		      case "countdown0"		        rec.BlobColumn(root.Name) = item		      case "countdown1"		        rec.BlobColumn(root.Name) = item		      case "countdown2"		        rec.BlobColumn(root.Name) = item		      case "countdown3"		        rec.BlobColumn(root.Name) = item		      case "countdown4"		        rec.BlobColumn(root.Name) = item		      case "countdown5"		        rec.BlobColumn(root.Name) = item		      case "countdown10"		        rec.BlobColumn(root.Name) = item		      case "gettingStarted_Button"		        rec.BlobColumn(root.Name) = item		      case "gettingStarted_Mask"		        rec.BlobColumn(root.Name) = item		      case "setUp_Button"		        rec.BlobColumn(root.Name) = item		      case "setUp_Mask"		        rec.BlobColumn(root.Name) = item		      case "startARace_Button"		        rec.BlobColumn(root.Name) = item		      case "startARace_Mask"		        rec.BlobColumn(root.Name) = item		      case "advancedTopics_Button"		        rec.BlobColumn(root.Name) = item		      case "advancedTopics_Mask"		        rec.BlobColumn(root.Name) = item		        		      end Select		    next		    		    G_Database.InsertRecord("theme_table",rec)		    		  else		    MsgBox "Error opening default theme file"		    Return		  end if		  		  if G_Database.Error = true then		    MsgBox "Error creating default theme in database"		    Return		    G_Database.Rollback		  else		    G_Database.Commit		  end if		  		  //Now that we have created the initial theme in the database we need to set it and modify it based on the users theme entries		  tempTheme.set("default")		  		  //Now read the contents of the theme file and then save the theme		  if fileTheme<>nil then		    dim xdoc as XmlDocument		    dim i,count as Integer		    dim item as string		    dim root as XmlNode		    		    GM_LogToSplash("Importing Theme.xml settings")		    		    xdoc = new XmlDocument(fileTheme)		    count = xdoc.DocumentElement.ChildCount		    		    for i=0 to Count-1		      root = xdoc.DocumentElement.Child(i)		      item = root.FirstChild.Value		      select case root.Name		      case "background"		        f = GetFolderItem("theme").Child(item)		        if f<>nil and f.Exists=true then		          tempTheme.backgroundImage = f.OpenAsPicture		        else		          MsgBox "Could not locate the background image"		        end if		      case "empty"		        f = GetFolderItem("theme").Child(item)		        if f<>nil and f.Exists=true then		          tempTheme.emptyRacer = f.OpenAsPicture		        else		          MsgBox "Could not locate the empty image"		        end if		      case "emptymask"		        f = GetFolderItem("theme").Child(item)		        if f<>nil and f.Exists=true then		          tempTheme.emptyRacer_Mask = f.OpenAsPicture		        else		          MsgBox "Could not locate the emptymask image"		        end if		      case "mainlogo"		        f = GetFolderItem("theme").Child(item)		        if f<>nil and f.Exists=true then		          tempTheme.mainLogo = f.OpenAsPicture		        else		          MsgBox "Could not locate the mainlogo image"		        end if		      case "mainlogomask"		        f = GetFolderItem("theme").Child(item)		        if f<>nil and f.Exists=true then		          tempTheme.mainLogo_Mask = f.OpenAsPicture		        else		          MsgBox "Could not locate the mainlogomask image"		        end if		      case "S_Countdown0"		        f = GetFolderItem("theme").Child(item)		        if f<>nil and f.Exists=true then		          tempTheme.F_startingHorn = f		        else		          MsgBox "Could not locate the S_Countdown0 Sound."		        end if		      case "S_CarLapBeep"		        f = GetFolderItem("theme").Child(item)		        if f<>nil and f.Exists=true then		          tempTheme.F_lapBeep = f		        else		          MsgBox "Could not locate the S_CarLapBeep Sound."		        end if		      end Select		    next		    		    		  else		    MsgBox "Error Occured, Theme.xml File Could Not Be Located"		    Return		  end if		  		  		  GM_LogToSplash("Saving Default Theme")		  		  //Now we can save this updated default profile		  tempTheme.save("default")		  		  //success = tempTheme.create("default")		  //Check to see if this succeeded		  //if success = false then		  //MsgBox "Error creating default theme"		  //end if		  //G_Preferences.themeName = "default"		  //G_Preferences.savePreferences()		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GM_DeleteFolder(f as FolderItem)		  'controlled stack, non-recursive deletion method for folderitems		  'by Guy Kuo		  		  #pragma BackgroundTasks false		  		  dim i , imax as integer		  dim stack() as FolderItem		  dim current as FolderItem		  		  if f = nil then exit		  if not f.Exists then exit		  		  stack.Append(f)		  		  while stack.Ubound >= 0		    current = stack.Pop		    		    if current <> nil then		      if current.Directory then		        if current.Count > 0 then		          'a non-empty directory so must delete its contents		          stack.Append current 'put directory back on stack for deletion after its contents are deleted		          		          imax = current.Count 'use for loop to delete items rather than stacking each item minimizes stack depth		          for i = imax DownTo 1		            if current.TrueItem(i) <> nil then		              if current.TrueItem(i).Directory then		                stack.Append current.TrueItem(i) 'remember directory to delete later		              else		                current.TrueItem(i).Delete 'delete simple file		              end		            end		          next		          		        else		          current.delete 'delete empty directory		        end		        		      else		        current.Delete 'delete simple files		      end		    end		  wend		  		  #pragma BackgroundTasks true		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub GM_FillRacersControlStructure()		  //This class can be called by anywhere.		  		  //It's goal is to check the database for all known racers.  It will then add those racers into the class control array so that we have tangible information to work with		  		  //Requires GM_PrepareDatabase() and a copy of G_Preferences to be instantiated		  		  dim rs as RecordSet		  dim temp as new raceCar		  		  		  rs = G_Database.SQLSelect("SELECT * FROM racer_table")		  if rs<>nil then		    redim G_Preferences.theRaceObject.racers(-1)//we will fill it back up soon enough		    while not rs.EOF		      temp = new raceCar		      temp.theName=rs.Field("name").StringValue		      //check to see if a seperate name pronunciation is included, if not just use the name field		      //Must also check to see if a null character ended up in the field		      if rs.Field("name_pronounce").StringValue = "" or rs.Field("name_pronounce").StringValue = Chr(&h00) then		        temp.speakName = rs.Field("name").StringValue		      else		        temp.speakName = rs.Field("name_pronounce").StringValue		      end if		      temp.UID=rs.Field("uid").StringValue		      temp.theScale=rs.Field("scale").StringValue		      temp.theChassis=rs.Field("chassis").StringValue		      temp.theClass=rs.Field("class").StringValue		      temp.theMake=rs.Field("make").StringValue		      temp.theModel=rs.Field("model").StringValue		      temp.theMotor=rs.Field("motor").StringValue		      temp.theCrystal=rs.Field("crystal").StringValue		      temp.theImage=GM_StringToPicture(DecodeBase64(rs.Field("image").StringValue))		      if rs.Field("email").StringValue = "" or rs.Field("email").StringValue = Chr(&h00) then		        //Do nothing as we ahve nothing		      else		        temp.theEmail=rs.Field("email").StringValue		      end if		      		      temp.Enabled=rs.Field("enabled").BooleanValue		      		      //do not use path		      //if rs.Field("imagepath").Value <> Nil then		      //f = GetFolderItem(rs.Field("imagepath").Value)		      //if f <> Nil then		      //temp.theImage=f.OpenAsPicture		      //end if		      //end if		      		      temp.theImageMask=GM_StringToPicture(DecodeBase64(rs.Field("imagemask").StringValue))		      		      //do not use path		      //if rs.Field("imagemaskpath").Value <> Nil then		      //g = GetFolderItem(rs.Field("imagemaskpath").Value)		      //if g <> Nil then		      //temp.theImageMask=g.OpenAsPicture		      //end if		      //end if		      		      temp.Active=false//it's not active by default		      G_Preferences.theRaceObject.racers.Append temp//this will create an active tangible data location for the database information now.		      rs.MoveNext		    wend		  else		    MsgBox "No racers found to update!"		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GM_FolderItemToString(f as FolderItem) As string		  //Convert a file from the file system to a string for base64 encoding		  		  dim bs as binaryStream		  dim data as string		  		  // read the data in from the temp file		  bs = f.openAsBinaryFile( false )		  data = bs.read( bs.length )		  bs.close		  		  // remove temporary file		  f.delete		  		  // return the binary data		  return data		  		exception// an exception occurred preventing the conversion		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GM_GetOSVersion() As string		  dim os as string		  		  //get os		  #if TargetMacOS		    os = "Mac OS"		    		    //be more specific of OS Version		    dim sys1, sys2, sys3 as Integer		    call System.Gestalt("sys1", sys1)		    call System.Gestalt("sys2", sys2)		    call System.Gestalt("sys3", sys3)		    		    select case sys1		    case 10		      os = "Mac OSX"		      select case sys2		      case 0		        os = "Mac OSX Chetaah"		      case 1		        os = "Mac OSX Puma"		      case 2		        os = "Mac OSX Jaguar"		      case 3		        os = "Mac OSX Panther"		      case 4		        os = "Mac OSX Tiger"		      case 5		        os = "Mac OSX Leopard"		      case 6		        os = "Mac OSX Snow Leopard"		      end select		    end select		    		    os = os + " "+str(sys1)+"."+str(sys2)+"."+str(sys3)		    		  #elseif TargetWin32		    OS = "Windows"		    		    //try to be more specific of windows version		    Soft Declare Sub GetVersionExA lib "Kernel32" ( info as Ptr )		    Soft Declare Sub GetVersionExW lib "Kernel32" ( info as Ptr )		    		    dim info as MemoryBlock		    		    if System.IsFunctionAvailable( "GetVersionExW", "Kernel32" ) then		      info =  new MemoryBlock( 20 + (2 * 128) )		      info.Long( 0 ) = info.Size		      		      GetVersionExW( info )		    else		      info =  new MemoryBlock( 148 )		      info.Long( 0 ) = info.Size		      		      GetVersionExA( info )		    end if		    		    dim str as String		    		    if info.Long( 4 ) = 4 then		      if info.Long( 8 ) = 0 then		        os = "Windows 95/NT 4.0"		      elseif info.Long( 8 ) = 10 then		        os = "Windows 98"		      elseif info.Long( 8 ) = 90 then		        os = "Windows Me"		      end if		    elseif info.Long( 4 ) = 3 then		      os = "Windows NT 3.51"		    elseif info.Long( 4 ) = 5 then		      if info.Long( 8 ) = 0 then		        os = "Windows 2000"		      elseif info.Long( 8 ) = 1 then		        os = "Windows XP"		      elseif info.Long( 8 ) = 2 then		        os = "Windows Server 2003"		      end if		    elseif info.long(4) = 6 then		      if info.long(8) = 0 then		        os = "Windows Vista"		      elseif info.long(8) = 1 then		        os = "Windows 7"		      end if		    end if		    		    str = " Build " + Str( info.Long( 12 ) )		    		    if System.IsFunctionAvailable( "GetVersionExW", "Kernel32" ) then		      str = str + " " + Trim( info.WString( 20 ) )		    else		      str = str + " " + Trim( info.CString( 20 ) )		    end if		    		    os = os + str		    		    		  #elseif TargetLinux		    os = "Linux"		  #endif		  		  return os		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub GM_LogToSplash(logmessage as String)		  //Make sure splash screen is active		  		  if splashScreen <> Nil then		    if splashScreen.Visible then		      //Write message to the text box		      splashScreen.StaticText_Message.Text = logmessage		      splashScreen.Refresh		    end if		  end if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function GM_PictureToString(p as picture) As string		  // Convert a picture to a string by saving the picture		  // out to a file on disk and then reading in the binary		  // data from that file.		  dim f as folderItem		  dim bs as binaryStream		  dim data as string		  		  // save picture to a temporary file		  f = getTemporaryFolderItem()		  f.saveAsPicture p		  		  // read the data in from the temp file		  bs = f.openAsBinaryFile( false )		  data = bs.read( bs.length )		  bs.close		  		  // remove temporary file		  f.delete		  		  // return the binary data		  return data		  		exception// an exception occurred preventing the conversion		  return ""		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GM_PrepareDatabase() As boolean		  //This method when called will prepare the G_Database class to be called upon later by other code.		  G_Database = new REALSQLDatabase		  dim f as FolderItem = GetFolderItem("FlipSideDB")		  G_Database.DatabaseFile = f		  		  return f.Exists//so we know if we need to make tables or not		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GM_StringToPicture(data as string) As picture		  // Convert a string to a picture		  dim p as picture		  dim mb as MemoryBlock		  		  mb = data		  		  p = p.FromData(mb)		  		  return p		  		exception// an exception occurred preventing the conversion		  return NIL		End Function	#tag EndMethod	#tag Method, Flags = &h0		Function GM_StringToSound(data as string) As sound		  // Convert a string to a picture by saving the binary data		  // to a file on disk and then reading the file as a picture.		  dim f as folderItem		  dim bs as binaryStream		  dim s as sound		  		  // write binary data to temporary file		  f = getTemporaryFolderItem()		  bs = f.createBinaryFile( "any" )		  bs.write data		  bs.close		  		  // open the file as a picture		  s = f.OpenAsSound()		  		  // remove temporary file		  f.delete		  		  // return the binary data		  return s		  		exception// an exception occurred preventing the conversion		  return NIL		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub GM_UpgradeDatabase()		  dim query as string		  dim rs as RecordSet		  dim rec as DatabaseRecord		  rec = New DatabaseRecord		  dim version as Integer		  		  		  GM_LogToSplash("Upgrading Database")		  		  query = "SELECT version FROM dbinfo"		  		  rs = G_Database.SQLSelect(query)		  		  if G_Database.Error = true then		    //Probably means we do not have version info in the database		    //this would be the earliest version of the database, create the dbinfo table populate a field for version and modify the racer table so it does not require a unique name anymore		    //Now we need to modify the racers table, make a temporary table to put all the records into, drop the original table, recreate it without constraints,copy the data back and then destroy the temporary table		    		    //Create temporary table		    query = "CREATE TABLE racer_table_temp (racer_id INTEGER PRIMARY KEY,name VARCHAR,uid VARCHAR, scale VARCHAR, chassis VARCHAR, class VARCHAR, make VARCHAR, model VARCHAR, motor VARCHAR,image BLOB, imagepath BLOB, imagemaskpath BLOB, imagemask BLOB, unique(UID))"		    G_Database.SQLExecute(query)		    if G_Database.Error = true then		      MsgBox "Database Error (racer_table_temp):"+G_Database.ErrorMessage		      		    else		      //Copy data into temporary table		      G_Database.SQLExecute("INSERT INTO racer_table_temp SELECT * FROM racer_table")		      		      if G_Database.Error = false then		        //Continue on by destroying the existing racer table		        G_Database.SQLExecute("DROP TABLE racer_table")		        		        if G_Database.Error = false then		          //Continue on by creating a new racer_table		          query = "CREATE TABLE racer_table (racer_id INTEGER PRIMARY KEY,name VARCHAR,uid VARCHAR, scale VARCHAR, chassis VARCHAR, class VARCHAR, make VARCHAR, model VARCHAR, motor VARCHAR,image BLOB, imagepath BLOB, imagemaskpath BLOB, imagemask BLOB, unique(UID))"		          G_Database.SQLExecute(query)		          		          if G_Database.Error = false then		            //Success so we copy the data back		            G_Database.SQLExecute("INSERT INTO racer_table SELECT * FROM racer_table_temp")		            		            if G_Database.Error = false then		              //Now we can destroy the temporary table		              G_Database.SQLExecute("DROP TABLE racer_table_temp")		              		              if G_Database.Error = false then		                		                G_Database.SQLExecute("ALTER  TABLE racer_table ADD name_pronounce VARCHAR")		                if G_Database.Error = false then		                  		                  //This should be the last step indicating success		                  query = "CREATE TABLE dbinfo (id INTEGER PRIMARY KEY, version INTEGER)"		                  G_Database.SQLExecute(query)		                  		                  if G_Database.Error = false then		                    //Define this as version 1 of the database		                    rec.IntegerColumn("version") = 1		                    G_Database.InsertRecord("dbinfo",rec)		                  else		                    MsgBox "Database Error (dbinfo):"+G_Database.ErrorMessage		                  end if		                  		                else		                  MsgBox "Could not alter racer table"		                end if		              else		                MsgBox "Could not drop temporary table"		              end if		              		            else		              //We failed		              MsgBox "Upgrade of Racer table failed"		            end if		            		          else		            //We failed		            MsgBox "Database Error (racer_table_temp):"+G_Database.ErrorMessage		          end if		          		        else		          //We failed		          MsgBox "Recreation of racer table failed"		        end if		        		      else		        //We failed		        MsgBox "Copy of racer table failed"		      end if		      		    end if		    		  else		    		    //We need to check the version number and then do appropriate things here		    rs = G_Database.SQLSelect("SELECT MAX(version) FROM dbinfo")		    version = rs.Field("MAX(version)").IntegerValue		    		    //Upgrade database to version 2		    if version < 2 then		      G_Database.SQLExecute("ALTER TABLE racer_table ADD crystal VARCHAR")		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 2 if the above is successful		        rec.IntegerColumn("version") = 2		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating database version table"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not add crystals column"		      end if		    end if		    		    //Upgrade databsae to version 3		    if version < 3 then		      G_Database.SQLExecute("CREATE TABLE raceprofile_table (id INTEGER PRIMARY KEY,name VARCHAR,racetype VARCHAR, numberoflaps INTEGER, timelimit FLOAT, minlaptime FLOAT, countdown INTEGER, roundtype VARCHAR, timeout INTEGER, lapindication VARCHAR, enablerankannouncement BOOLEAN, rankinterval INTEGER, autodeleteracers BOOLEAN, UNIQUE(name))")		      if G_Database.Error = false then		        //make sure to put an entry in the db that it is now version 3 if successful		        rec.IntegerColumn("version") = 3		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating database version table"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not add raceprofiletable"		      end if		    end if		    		    //Upgrade database to version 4		    if version < 4 then		      G_Database.SQLExecute("ALTER TABLE summary_table ADD laps_leading INTEGER")		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 4 if the above is successful		        rec.IntegerColumn("version") = 4		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating database version table"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not add laps_leading column"		      end if		    end if		    		    //Upgrade database to version 5		    if version < 5 then		      G_Database.SQLExecute("ALTER TABLE raceprofile_table ADD staggeredstart BOOLEAN")		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 5 if the above is successful		        rec.IntegerColumn("version") = 5		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating database version table"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not add race profile staggered start column"		      end if		    end if		    		    //Upgrade database to version 6		    if version < 6 then		      G_Database.SQLExecute("ALTER TABLE raceprofile_table ADD rankmethod VARCHAR")		      if G_Database.Error = false then		        G_Database.SQLExecute("ALTER TABLE event_table ADD rankmethod VARCHAR")		        if G_Database.Error = false then		          //Make sure to put an entry in the db that it is now at version 6 if the above is successful		          rec.IntegerColumn("version") = 6		          G_Database.InsertRecord("dbinfo",rec)		          if G_Database.Error = true then		            MsgBox "Error updating database version table"		          end if		        else		          //Warn of the failure		          MsgBox "Database upgrade failed, can not add race profile rank method column"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not add event table rank method column"		      end if		    end if		    		    //Upgrade database to version 7		    if version < 7 then		      G_Database.SQLExecute("CREATE TABLE laps_backup_table (id INTEGER PRIMARY KEY,event_id INTEGER,racer_id INTEGER, lap_number INTEGER, lap_time FLOAT,lag_time FLOAT,time_at_lap FLOAT)")		      if G_Database.Error = false then		        //Copy old data into backup table just in case		        G_Database.SQLExecute("INSERT INTO laps_backup_table SELECT * FROM laps_table")		        if G_Database.Error = false then		          //Make sure to put an entry in the db that it is now at version 7 if the above is successful		          rec.IntegerColumn("version") = 7		          G_Database.InsertRecord("dbinfo",rec)		          if G_Database.Error = true then		            MsgBox "Error creating backup laps table"		          end if		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not create backup laps table"		      end if		    end if		    		    		    //Upgrade database to version 8		    if version < 8 then		      //We need to add Lamborghini to the database		      //This upgrade is not critical and we do not care about an error as it probably means they had already added it		      //We will go ahead and bump up the database version first in this case as even if this upgrade does not succeed it is not needed for the program to function		      //Make sure to put an entry in the db that it is now at version 7 if the above is successful		      rec.IntegerColumn("version") = 8		      G_Database.InsertRecord("dbinfo",rec)		      if G_Database.Error = true then		        MsgBox "Error upgrading to database version 8"		      end if		      G_Database.SQLExecute("INSERT INTO lu_make(make) VALUES ('Lamborghini')")		      		      dim rsi as RecordSet		      dim i as Integer		      //Find the record ID		      rsi = G_Database.SQLSelect("SELECT make_id FROM lu_make WHERE make = 'Lamborghini'")		      i = rsi.Field("make_id").IntegerValue		      rsi.close		      		      G_Database.SQLExecute("INSERT INTO lu_model(model, fk_make_id) VALUES ('Countach','"+str(i)+"')")		      G_Database.SQLExecute("INSERT INTO lu_model(model, fk_make_id) VALUES ('Diablo','"+str(i)+"')")		      G_Database.SQLExecute("INSERT INTO lu_model(model, fk_make_id) VALUES ('Jota','"+str(i)+"')")		      G_Database.SQLExecute("INSERT INTO lu_model(model, fk_make_id) VALUES ('Murcielago','"+str(i)+"')")		      		      If G_Database.Error = true then		        //Do nothing we do not care if it could not do it.		      end if		      		    end if		    		    //Upgrade database to version 9		    if version < 9 then		      G_Database.SQLExecute("ALTER TABLE laps_table ADD lap_place INTEGER")		      G_Database.SQLExecute("ALTER TABLE laps_backup_table ADD lap_place INTEGER")		      		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 9 if the above is successful		        rec.IntegerColumn("version") = 9		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating database version table"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not add lapplaces column"		      end if		    end if		    		    //Upgrade database to version 10		    if version < 10 then		      G_Database.SQLExecute("ALTER TABLE raceprofile_table ADD endcountdown INTEGER")		      		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 10 if the above is successful		        rec.IntegerColumn("version") = 10		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating race profile table"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not add ending count down column"		      end if		    end if		    		    //Upgrade database to version 11		    //This upgrade adds the table needed for themes		    if version < 11 then		      G_Database.SQLExecute("CREATE TABLE theme_table (theme_id INTEGER PRIMARY KEY, name VARCHAR, backgroundColor VARCHAR, backgroundImage BLOB, countdownBeep BLOB,"+_		      "defaultText VARCHAR, editRacers_Button BLOB, editRacers_Mask BLOB, editRacers_MouseOver BLOB, endingHorn BLOB, generalConfigScreenText VARCHAR,"+_		      "generalConfig_Button BLOB, generalConfig_Mask BLOB, generalConfig_MouseOver BLOB, lapBeep BLOB, mainScreenText VARCHAR, main_Button BLOB,"+_		      "main_Mask BLOB, main_MouseOver BLOB, raceConfigScreenText1 VARCHAR, raceConfigScreenText2 VARCHAR, raceConfigScreenText3 VARCHAR, raceConfig_Button BLOB,"+_		      "raceConfig_Mask BLOB, raceConfig_MouseOver BLOB, raceScreenText VARCHAR, raceScreen_Button BLOB, raceScreen_Mask BLOB, raceScreen_MouseOver BLOB,"+_		      "startingHorn BLOB, statisticsScreenText VARCHAR, emptyRacer BLOB, emptyRacer_Mask BLOB, mainLogo BLOB, mainLogo_Mask BLOB, scaleBackground BOOLEAN,"+_		      "editRacerScreenText1 VARCHAR, editRacerScreenText2 VARCHAR, statistics_Button BLOB, statistics_Mask BLOB, statistics_MouseOver BLOB, countdown0 BLOB,"+_		      "countdown1 BLOB, countdown2 BLOB, countdown3 BLOB, countdown4 BLOB, countdown5 BLOB, countdown10 BLOB, gettingStarted_Button BLOB, gettingStarted_Mask BLOB,"+_		      "setUp_Button BLOB, setUp_Mask BLOB, startARace_Button BLOB, startARace_Mask BLOB, advancedTopics_Button BLOB, advancedTopics_Mask BLOB, unique(name))")		      		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 11 if the above is successful		        rec.IntegerColumn("version") = 11		        G_Database.InsertRecord("dbinfo",rec)		        		        //Now we need to trigger creating the initial theme		        GM_CreateInitialTheme		        		        if G_Database.Error = true then		          MsgBox "Error updating database version after creating theme table"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, error creating theme table"		      end if		    end if		    		    //Upgrade database to version 12		    if version < 12 then		      G_Database.SQLExecute("ALTER TABLE raceprofile_table ADD endinghorn BOOLEAN")		      G_Database.SQLExecute("ALTER TABLE raceprofile_table ADD countdowntype VARCHAR")		      G_Database.SQLExecute("ALTER TABLE raceprofile_table ADD rankchangeannouncement VARCHAR")		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 12 if the above is successful		        rec.IntegerColumn("version") = 12		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating database version table to version 12"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not add race profile columns"		      end if		    end if		    		    //Upgrade database to version 13		    if version < 13 then		      G_Database.SQLExecute("ALTER TABLE raceprofile_table ADD bestlapannouncement VARCHAR")		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 13 if the above is successful		        rec.IntegerColumn("version") = 13		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating database version table to version 13"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not add race profile column bestlapannouncement"		      end if		    end if		    		    //Upgrade database to version 14		    if version < 14 then		      G_Database.SQLExecute("ALTER TABLE event_table RENAME TO race_table")		      G_Database.SQLExecute("ALTER TABLE event_racer_table RENAME TO race_racer_table")		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 13 if the above is successful		        rec.IntegerColumn("version") = 14		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating database version table to version 14"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not rename event_table"		      end if		    end if		    		    //Upgrade to version 15		    if version < 15 then		      		      query = "CREATE TABLE racer_table_temp (racer_id INTEGER PRIMARY KEY,name VARCHAR,uid VARCHAR, scale VARCHAR, chassis VARCHAR, class VARCHAR, make VARCHAR, model VARCHAR, motor VARCHAR,image BLOB, imagepath BLOB, imagemaskpath BLOB, imagemask BLOB, name_pronounce VARCHAR, crystal VARCHAR)"		      G_Database.SQLExecute(query)		      if G_Database.Error = true then		        MsgBox "Database Error (racer_table_temp):"+G_Database.ErrorMessage		        		      else		        //Copy data into temporary table		        G_Database.SQLExecute("INSERT INTO racer_table_temp SELECT * FROM racer_table")		        		        if G_Database.Error = false then		          //Continue on by destroying the existing racer table		          G_Database.SQLExecute("DROP TABLE racer_table")		          		          if G_Database.Error = false then		            //Continue on by creating a new racer_table		            query = "CREATE TABLE racer_table (racer_id INTEGER PRIMARY KEY,name VARCHAR,uid VARCHAR, scale VARCHAR, chassis VARCHAR, class VARCHAR, make VARCHAR, model VARCHAR, motor VARCHAR,image BLOB, imagepath BLOB, imagemaskpath BLOB, imagemask BLOB, name_pronounce VARCHAR, crystal VARCHAR)"		            G_Database.SQLExecute(query)		            		            if G_Database.Error = false then		              //Success so we copy the data back		              G_Database.SQLExecute("INSERT INTO racer_table SELECT * FROM racer_table_temp")		              		              if G_Database.Error = false then		                //Now we can destroy the temporary table		                G_Database.SQLExecute("DROP TABLE racer_table_temp")		                		                if G_Database.Error = false then		                  		                  G_Database.SQLExecute("ALTER TABLE racer_table ADD email VARCHAR")		                  G_Database.SQLExecute("ALTER TABLE racer_table ADD enabled BOOLEAN")		                  G_Database.SQLExecute("UPDATE racer_table SET enabled = 1")		                  		                  if G_Database.Error = false then		                    		                    //Make sure to put an entry in the db that it is now at version 15 if the above is successful		                    rec.IntegerColumn("version") = 15		                    G_Database.InsertRecord("dbinfo",rec)		                    if G_Database.Error = true then		                      MsgBox "Error updating database version table to version 15"		                    end if		                    		                  else		                    MsgBox "Could not alter racer table"		                  end if		                else		                  MsgBox "Could not drop temporary table"		                end if		                		              else		                //We failed		                MsgBox "Upgrade of Racer table failed"		              end if		              		            else		              //We failed		              MsgBox "Database Error (racer_table_temp):"+G_Database.ErrorMessage		            end if		            		          else		            //We failed		            MsgBox "Recreation of racer table failed"		          end if		          		        else		          //We failed		          MsgBox "Copy of racer table failed"		        end if		        		      end if		    end if		    		    //Upgrade database to version 16		    if version < 16 then		      G_Database.SQLExecute("CREATE INDEX index_name ON theme_table (name)")		      if G_Database.Error = false then		        //Make sure to put an entry in the db that it is now at version 13 if the above is successful		        rec.IntegerColumn("version") = 16		        G_Database.InsertRecord("dbinfo",rec)		        if G_Database.Error = true then		          MsgBox "Error updating database version table to version 16"		        end if		      else		        //Warn of the failure		        MsgBox "Database upgrade failed, can not create theme index"		      end if		    end if		    		    		    		    		    G_Database.Commit		    		  end if		End Sub	#tag EndMethod	#tag Note, Name = LICENSE		Copyright 2008 Jeremy Auten				This file is part of Flip Side Racing Software.				Flip Side Racing Software is free software: you can redistribute it and/or modify		it under the terms of the GNU General Public License as published by		the Free Software Foundation, either version 3 of the License, or		(at your option) any later version.				Flip Side Racing Software is distributed in the hope that it will be useful,		but WITHOUT ANY WARRANTY; without even the implied warranty of		MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the		GNU General Public License for more details.				You should have received a copy of the GNU General Public License		along with Flip Side Racing Software.  If not, see <http://www.gnu.org/licenses/>.	#tag EndNote	#tag Property, Flags = &h0		G_allowedtext As string	#tag EndProperty	#tag Property, Flags = &h0		G_Database As realsQLDatabase	#tag EndProperty	#tag Property, Flags = &h0		G_Debug As boolean = true	#tag EndProperty	#tag Property, Flags = &h0		G_Preferences As preferences	#tag EndProperty	#tag Constant, Name = buttonheightdefault, Type = Double, Dynamic = False, Default = \"20", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"20"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"24"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"22"	#tag EndConstant	#tag Constant, Name = popupmenuheightdefault, Type = Double, Dynamic = False, Default = \"24", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"24"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"24"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"28"	#tag EndConstant	#tag Constant, Name = textsize11, Type = Double, Dynamic = False, Default = \"11", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"11"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"11"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"9"	#tag EndConstant	#tag Constant, Name = textsize12, Type = Double, Dynamic = False, Default = \"12", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"12"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"12"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"10"	#tag EndConstant	#tag Constant, Name = textsize14, Type = Double, Dynamic = False, Default = \"14", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"14"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"14"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"12"	#tag EndConstant	#tag Constant, Name = textsize16, Type = Double, Dynamic = False, Default = \"16", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"16"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"16"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"13"	#tag EndConstant	#tag Constant, Name = textsize18, Type = Double, Dynamic = False, Default = \"18", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"18"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"18"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"15"	#tag EndConstant	#tag Constant, Name = textsize24, Type = Double, Dynamic = False, Default = \"24", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"24"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"24"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"19"	#tag EndConstant	#tag Constant, Name = textsize25, Type = Double, Dynamic = False, Default = \"25", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"25"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"25"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"20"	#tag EndConstant	#tag Constant, Name = textsize32, Type = Double, Dynamic = False, Default = \"32", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"32"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"32"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"24"	#tag EndConstant	#tag Constant, Name = textsize35, Type = Double, Dynamic = False, Default = \"35", Scope = Public		#Tag Instance, Platform = Mac OS, Language = Default, Definition  = \"35"		#Tag Instance, Platform = Windows, Language = Default, Definition  = \"35"		#Tag Instance, Platform = Linux, Language = Default, Definition  = \"27"	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="G_allowedtext"			Group="Behavior"			Type="string"			EditorType="MultiLineEditor"		#tag EndViewProperty		#tag ViewProperty			Name="G_Debug"			Group="Behavior"			InitialValue="true"			Type="boolean"		#tag EndViewProperty		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule